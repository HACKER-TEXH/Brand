/* Generated by Cython 3.1.2 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_2"
#define CYTHON_HEX_VERSION 0x030102F0
#define CYTHON_FUTURE_DIVISION 1
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CInitCode */
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #elif defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)
  #endif
#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Brother
#define __PYX_HAVE_API__Brother
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#if __cplusplus > 201103L
#include <type_traits>
#endif
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "Brother.py",
};
/* #### Code section: utility_code_proto_before_types ### */
/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* PyExec.proto */
static PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);

/* PyExecGlobals.proto */
static PyObject* __Pyx_PyExecGlobals(PyObject*);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."


/* Module declarations from "Brother" */
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "Brother"
extern int __pyx_module_is_main_Brother;
int __pyx_module_is_main_Brother = 0;

/* Implementation of "Brother" */
/* #### Code section: global_var ### */
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "?";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_zlib[] = "zlib";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_builtins[] = "__builtins__";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_decompress[] = "decompress";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_x_YoXv_yd_l_V_KRU0_YD_I_0_VT_C_u[] = "x\234\355]Yo\343Xv~\266\005\343y\220\215\246d^\356l\303\010\264\331V[[K\362RU\3350(\211\262Y\226D\rI\225\355\366\030\230\004\0100\010\022 \r\314$\203`\372-\310<\346/%=$\347\222\274\213V\273\274T\271\273\344\256\246?]^\336\345\234\357,\367\222\224\335\301\310\363C\301\013\326\335\030u\355\320\t\335\201\263\336\363\275\201\320\016T!9\221s\354q\350\366\306\375\2467\036-?+\330\201\020xI\245\2167\354\214}\337\031\206\231\3368\034\373N@\256i]\370\216\335\255{^\277x\355t\306\241\347\343\013C\337\351>\356JV*\220\331\214\307nWl\333\201\243\253\342\205\035\\\364\335\266\370\003>\004\343\366\310\367:N\020\210x\266\342\250o\207=\317\037\210g\201\327\271tB1\010\372b\307\361aN.i\014\246+\276\017\274\241\030\334$W\371\366\260\353\rD\337\341\333\243M\005\241?\356\204\370\227;<\027\371\241\340!|>\351\254{A\006\246\020:\203\315\324\350\362\\p\207Ah\367\373\202\023\214\034\3732\265\265\276\336\367\274\221\330\361\306\303P\364.\003\2613\202\371^\365\304q\340\333\347\320\2418\206#\234\271h\373^ \216\355`W\022%\361\335\367\263\377\326\327ov7\276\273F\355w\212\271\243\355\310\2229\330\3309\347\213T\035J\002(\221\024\345\035\332\261\014\370\350\317T\270\232\250\260\016?\311\\}\347\267c'\010\203D\025\353\347\241\260+\3048\323\271\360\334\216\263\371.\265\337J#\ti)1F\262D\220\302\020=\253\3222\225\226i\244L\246gU\206\350Y\023Y\024\312\272\234@K\322\245\022\305&+6\025\002\241\007\n5Z\001Y\024*\022i\330\322H]Y\"\205\0301\030\304H\241e*ROk\365\030\353\0262cdHH\"H\246H\241H\245\210\314\317@\022C\032A\264\025\231\226\311\254L\225\032\024\222\323\212\244\020D+*2C\264\236\254\023D\007\243\322N4M\022\004A\003hJ\244\320\244s2\021\371M\013h%:dS\226\245f\002UR\310dm\321AY\312~\014\262L\006Y\320\004\201\325B\243V*\304\037r\262A\232\312i\212\302\303\034\207\313\034~{\230-U\217H\201\306.\327\220L\240!\023h\260\n\006WJg\232\003\016Q\250\230\211\272\363\n\225M^\241\344\314+\240\202\006\303\\\261\314\025+-\212e\231\203.\301\232,q\260D\261%3\250\021h\020\033\310\353\006\351\261\210dSn\021L%[\004\rqP\246Pc""\245\032-\325Y]]\223O\022\254P:\026A\326\026\007K\034N\372\336\327\024\351 \206\347\226$\365\222R \305^\014\017\230\332K@A\223@\240^\002uJ\245\222I5\001P\227j\207\345V=\313\025\274=)\267Z-R k&\205\272\\`\230\026S\333\007\010t\312fs\255\243\211\202r\376\2406Y\300\265\017\303-\306\3305\r:\t\323\240c\264$\016\231\tC]\213\272\002(6I\023\030\313y\016\027O\030\211\243\002\227`0\231}\016\227\017a\224-\256\240\302\341:\207\271:\332\021\330X\216\025\310f\221\303%\016\037S\254\231u\016\263r\235\253o\311\034\326\0168\\&Xf\342\001\307UbX\2532\314\232\004\025\355s\370\224a\203\016\201\362t@\003FE\323I?\003w\230\210\256\nT#\016\252\252Q\317\203\241F!b\245\304\010\253\240]\342l0&\225\r&T\214e\006\271\032\032W\303\344`\302\307\252I\343J\2259\336*\363\274\000\3518,V\227\305\255:\214B\312\237dO\233Y\256\240\302\341\026\305\244\321:\270)2#\2145\006M\nie&\252\272&s\020I\247\005D?\221Q\326uV\007\3032\303\210B\304j Zj\322\353XX\250\033\312\004\314Q\214X1\355\032lO*p\270\302\341\006\207\217\031F\024\222\2014\025\032f0\224\031T(4h\005\215$\000\000Y)P\322\245Xc\305\232rB\260aH\207\034\256\020\014R8a\230\366n\322V\230\250#\330`X\246P\2218x\3020\211<\001\306W\264\234k[Sh\r\235\225\232\034d\275\230J\216b\213\026S\205E\260\3140\342`\216\303\\\025\256\021\231\253\242p\220\025#\211\203|q\236\303E\016\357s\270\304\3412\207+\034\2562,s\220\353J\346\272\222Y3L\374\212\316\303\034\207\313\034n1\314\246\252\033\014Z\0242M\000,\020\2541\231k:\017]\212\r\326;\340\022\207\313\014\023.k:kPg\342\327\231\310\001\0362LU\2533n\352\006\017s\034>8\314\275mei\201%q\220\322\331dB\004X\340\360>\207]\016\2279\\\341p\213\303\307\014#\356Z\223A\213\024\353\324]F0\227c\351\001.\2209H&\247\323(\020AZ,[\304\360\232:\307U\214\337\236d+$\327\305\0052\203\3345\032-f\232\326\231\263\2130\231\276nP\201b\310\027W\031\246len7\202\007\207\331\323\275,+\240\035\233L\032&7\005\223\231\030\306e\016Wx\234\3136\213\r\256\240\3160\327\205\314\265Km\013c\227a\223\203D\235\006\270\271\"\303\n\303\032\225\221A\323t\200\224\233\030\226""\031\346j\320\376\001SU\00069H\370`(T\346\030\356s\270\314\260\314AZ\314\024\212a\226gYR@3\265\244\240\325*\327\271\002\210\375\2235\370\246Y\271.q\260\302\260\314\301<\207]\016\263\026u\235A\223\203%\212\231\0105\223\351\004\014\213\r\305<\245\220\311\204.\363\"H{4-\223\203\244\033\223I\r'\346\0042\257\325\202e[\3424[\210$\334-\272~86m\002\222y\036\347)\263\216+pm\222'\236 \005\021DB\343\251I\312NMVF\030uj\022*\274\211\326\002\337o\255\367<_\270\356\n\356\020o\245\234;\2338)\223\266\276^\027\222\037\333\336MU\274\037\334~\337\336\3262\222\260Yv\207\343\353\035\341hG\310\016\273\276\347vS\264n{wz;\006k\004\207\n<z<\345H\216\221G\216,\013)x\010\344\362\316n/%\264\312\351\260\277#\334\006\241\277y\036n\335\261\326\317wS\331\321\250\357\2348\355C7\334\326\024#\243\350\302\346\341A\253R\026\205\276{\351\010\373N\347\322\333\022\362\027\2767p\266\331\245\027d`\370W<OC\021a\252\254sw7%\261\013\336\317^\240B\276(\252\026\315\345\234Z\222\010\212dU\372Xzm\267\357\010M\273g\373n2l\326\323\330\276\034\3130\361[\333\276\023n\333w0\365\316\335\2260\261)v{q\227\271u\341\377\367\360\377%T\353sb\301\033t\031{4r\206\335\315\250\261\255\365\256\323\023\256\\\030\331U\260\231\250\322>\336\305\022\235\324\017\321\270(K[[\361\230\263\273\275\215\tu\237\304\355D\nO\260Pm\305\372\231\327\232&\032\320\326]\006\355\010\3160}\324\334\022&\225\246fn\355\343\273ej[\330\264)\"9j[\312,\356^\223E]Gq5&\363\270\327\215h\212\355%\242\020\025\235H\242}\275\260\232\242\212\212I\353\375\000\"\323n\333\327\240\2336\351#\267@\214\017\022\335\234\n\357R\221\271\200\265l\335MJ\364\266\375\303\343\244\211dQ\275W\234\206*\213x_f\321\270\210\330P\304\240;\"p<\250X\020\235\207\t\273\363@awbaw\260\260;D\330\371%\302\326\357\223&\260\272v\242\253SB\355\274F\241v\210P\013K&\214\244\214\024Y\252\256\356\010\327\323\023\273\337i\"\031-\033;\022\215dX\274y\341F\343\241\371N8\366\207\323\333\362Y1'\346\305B\022n\360\215\205\313\361\274\220\263 \326p\201f6\304@EP\246\036\035\215\350hfP\364{&\340D\261\2463\323B\005""\226\374\350P\337\217\317wg\316\343\214\023r?!\225\307\207\002>\024\361a\017\037\366\361\341\000\037J\370\360\r>\034\342C\031\037*\370P\305\207\032>\324\361\341[|h\340C\023\037Z\370p\204\017\307\370p\202\017\247\370\360\006\037\336\306\203rf#\r\022\005\313\262\360\311\336k\034\361\243\242\365\2348mB@\225\024\334\"\211\320\367\305\346\245QyI<\306\301\363\"\212\304,\020\337v\357n\235\273\333\336\003#\362t,\276\210\t?\266\027\345W\367\023~~^\245\001\305QJ\000q\003\361\023d\3202\240z\364K\211\251\361/\215\345Z73\r6+\351o\024Y:\210\252F\037\220dE\037p\361^\225\225\313\260<\342>\354\361\037\366\371\017oX\235\335Tn\354\366\273\333\345\312\033\3258\335\021\256><\330/\035;~\340z\303m\025\3443\225\330u\347k\032i\244_\207K\352z\263\225\361}3Q\227XJw>[G\226\370<\361by:g\333\375\013\373\375\356fo\203\221\350\346.!R\006\230\224\001*en\317\241\350\342n\2034\312\263&na\2266\332\363\261FL8#&\214\231J\310EL\030\361\241t\021\031YDB\025\221\021Ed4\021\031I\304/\231\"X\277\355'Q$ja!E\326\356c\307\332,1\026/\317&\330\2606K\204F\345T\321\014|E\204\020A\252N\220\241\306\250\016Q\326 \365\242\2058 d\311\244\036\232\203\224hMLZ\306#\2404i}\213\262\031\310\242,\t&)\241\247\363em\tU\326b\226\254-'\310\332\022n\254-\244\305Z\244\317\316\303\031\2616C\206\316\263\222\001\337p\271\335>I\214\353`7\325*\346\2535hqx=\323d\276\210\033:\334\327F\360\253T\325\243#n(_\264\"\214[\316\025\324\013\\\313\214\312q\357Y`V\031ov\344\242\353\241\302\373\350\027\356\275\254k\222\214\3175\362z\302\214\036O\rdI\006\202<P\226^35\264\007Pc*\236\\\007\200\206\327\037E\220\367\361\236\300\330&\333\001\037\034_\330\025\026.P\014Q\320$\272'\000\225\345%\2655\250m\030\244r\262\000x\271\005\312-\014\007/\257`\221\202\007v7\275\nY\260\241%\010\217\\_,\\M\260\355+pJ\020\320\366-]\252\n1\005\277\255\317R0\025-.\036\232\025/\210is\026\002l'\253\227\304\2629d\233\310\220\347\244\331,Cv\347\263Qx\267\227;+es\333{95\273\263\227\313\036o+\226\025\351AV3\226\262\363\375\242\034Z\210\223hB\322\014\220T\200\334yI\276<O}\353\213""\267\"_xy\210s\025\035A\006\363\213Z\036F\353&}\265<|\201\345\341\374\365!P\373\343V\205s\235\3242\236\037\2758\325\313E\031\021\247\366K!\372\257f\037d\201\307\377\365\223\376\t\224_\232\247&$\207j\3160=\016v\204x\301\241\221\030}\370-\312\200\220`\r\001+\010ykE\373WN{\226\350\274$\355\205\003\347\246e\217r>\344\253\216\277\255j\031\003g9\314\0326?\332\034\266\036f\017\032\027\003\036b\021\342\343*$g\205h\027h\347\236JH\336\021 \001jZ\222\276,\267}\302\362\312\304)\244b\231F\006!K\230\353\210\356\031\242\024\rq\337\262\364\243g\036\342SFcJ{/#0\303\214\004&A\326\255?f\204\370r2H\235\016\262\201\364\352\311\307\256\305t\031\017E\226\344\214\251>f(\006\035\210\"\035\347\223\221T\033\005K\252<UJZ$%I\2662\246\262`h\353s7I\361\346\002\336\331\370\330m\0208\340\352\310H\3664aQ($qg\277\225~\200\231\325\335k\247/\350\211\024\232\005\274\277\205$\023\201\220d\345\251\342\260\000gT]\3223\006z\214\246bg\221\350Jk&\203\254Tr\262u\370dUix\021i\232J\306Z0\266u\341\225\006\346\345\221\371u\206\346G>H\263\374\031\032\372\370\314\275O\316,hfQ.\272\212u\253X\267\212uO\213u\361\243f\217K_\347=fF\236\345\010\347\356c\254\335\263]\267\334&W\226\275\262\354\225e?\310\262\347\334\302\273o[\004\337FMrS\254\351V:izp\323\362\306\235\013A\331\027\232}\267\353$s\341\357\200\275\236LfmI\356\265\366\n3\257\265\217\316\273L|EU\340\227e\245\360}\302\205\031\330Z\234\255-\317\276\326\226\344^ks2/%z:d\345\236W\356y\345\236\037\357\236{c\030\331\3710|T\3465q/\237\264\264\265\276\354\265\215\351\264\253y3h\273\366p[\001)8\276\353\004\272\264\2752\353\225Y\257\314\372\271\366\016'\363\217d\367o\361\271\356n\252\352]\272\366\275\023Dx\313m\337\224\025\224LOE\0319\223\305\273e\310z\362$\255h\222\006t\"k\217e\353\276\347\235\303e\361\326\245J8[\2109k\342W\t\220\232\311\313\317G[$\231\213\267\010\347%\204\220\374\340\2240\226\374oz\273\251m\204\237@\302C\223dsG\250\373^\017Z\333\256\224\n\365\264\234AB\336\033\366\334\363\261o\207x\020\371r!\237\006\021\t\323\303\327\240l\336\350#\315\222\233G\251\365""\371O\214R*\314I\351\340\234\232l\251->7'\317\243\347.g\0239m\225\310\255<\376\312\343?\313\016Z\234\306\335A\022\227a\017\267A\022\227<\332Fr8\001r\270\371;g\220\275\255\356\357\256,ve\261\237\347\376\356\375\217\014M\337\272]\335}\\\335}\\y\342\225'^y\342\247\337}|\314\243\244\363\356=\276\322\027\311%I\317+\225Ri\365,\3513\216\370\227\374\256\300\013\276*\360\242\35735\234\356\300\025\252^\350\010\026\336#\341\237\231F\026\222\021~\353R^\275\327\364\222\3575\275\374\373\036\246\204\232\265\225\257\372,\276\352\265\275\356!\324\352\215m]\301\274\22755\243\313\222n}\342\367\236Vog\376\n\275\330\013\273\260\325\333\231\253\214\353Sy\251\265e\033\267\334:>5\347\351!\004\237\303pY\226\020Bz=\371~\252\327\311\361_\367V\324\242-(\306\357\347\334\202\"\337\304&E/\236-\332\034y\3765\365\323h\217\236\231\366\245a\317\035\272\327\302\251n\232\271\025\365W\324=\324\237\3766\223\347%>\373j\224\025\353W\254\377\034\254_\364\nr\374\370\240\372\334\204\217\036\231\301\330j\033\326c\226\266\263\242\375\363\323\376\201\2179m\305\374\337\206\224S\222T\t}Z;h\252R\355\203K\036\236\2223rd\016\257\300\341\317\334\327A\317\356\365\263\315\243\346\331[\t}[X\321\377\213\362\372FtgO\227\365\214\261\340&\343'c\377\203\310o=3\361\353\236\037\332\375\326\361\212\366_\024\355M\374\322\277\212L%\203\344\317\236\360|V\342'\233\322\365\370\326\032D]\223|\241\351\312$\276\014\223x\324\243'\257+*h\231\347\336\377\331\217\376\220\253\300})tie\017_\206=\220g\236\360ss\212\242Y\031$\351\25736\260[\364\002,W\026Y\300\303\0369\355\371\351\236\277#\024\234\300\365\235\263\254\211LD\337\277^\261\376yY\277\327\330\263P\364\320\233\302\261\301+=\304=\332\007Q\205y\217E\3427\262?\263\343oV\262\215V\272u\3744\262'\366\323rp\206`:0\327\255\025\313_\312\267_F\3546\027\320\273i\017\202\361\360\234l\273\340\227\335\302\017\237\226\353\224\337\346\247\344\367G\270v%\243?\213s\247\307s\345\331_\210\363\302~\251\272_l\344\032\305la\372\251\346\327\345\340\347\371w5\243H\237\333\301Oe\366\321\027\007>\321\331""\267\024i\264b\374\0131\036\3374\312\202\207B\2266\347%e\353\365\274Z\203\360\232\026I2\214J\237]\324\342\261\276\026\337O\270\377\354\0175\344\353\007\310\322-\362&\010~\016\021dh\310RFB\361\337\260Y\255q\277\2145n\024s\370\035\037\204\377\220QF\003+\316 \030`\323\351\217\373\216?\365\230\347\311(\250x\275\036Hw\033\351\031}\333\366\007\272\232\376`\332\333HQ\215Og>\0171\036\343\331\357\221q/%\250\023\2570\255\254\346\013\261\032\2623\244Do\303)V\006\241%_\031\374k\216$\323/\350\254,\340\371- \211\322\311\337\2110e=\372;\021\017|U\362\263\337B\200^p@\221tH\272\344\005\357\373\376\332\255$z\252\242$IZ!\273\212\021_V\214\200\205\306\353x\232\356a\314\356\\\351\330\375\340\to,\224_\361\376\313\342\275\205W\331*~\265\r\231\013\276\327\355\371\271\017\245O\332dzv\307_\221%$\037\"\224\335'\373N++xv+\230\312\214>\346\213$^Av$G\331\021\254\272\027}\377\341\324j[\311\310\023\353m\331|uA\344\271\255\2506\032yBV1W1\344\013\213!F\024CT\t[\367/\"z\211G\262\243\315Z\211l\326\326\020\222\220%\254L\341\0131\205o\\\217\335\022W3\006\375&\246\350{sU0\021\364\351l\003\347W^\220\tn\202\320\031l\246\256\273\347i\017\316\013\027a8\n\276\336\336\276\272\272\312\364\354\216\323\366\274\313L\307\033l\307a\253e\367\035\247\233\332Zzq\347\302\0163Wp\010\240\323\350\352\203R\243qx\330\275\276\371\366\355a\013\251\373\025\253\353]\370?\360\272\316\256\3359\013\241\301\365\350/\212\367\335\241sM\376\250\370\310w\207\341f/\365\235\377\235\244(\357\320\216e\014~\376\303\237\376\307\376\371/\375\371\217\377\360y\376A\3270\200?\374\031\217\231\014y\316\210\207\257u\314\277\021~\376\313?\t\025\033\374\342\336x\330\301\257\353\010\233\215\3610\020\354^\350\370B0\356t\234 \350\215\373B\337;w\207\023\272v\202\221c_\ni[P\200\254\033WN\277/\202\202\035!\364\304\223l\271X,\210\000\275~\260\001]\301\345\236\260+\364666\004\362\263\276\236\310E\001\271\374\373\037\360\277?\375\007>\301>$\210\376cEq\315\231\n\344\344G\224CK\361@\244\035E\246\003\371\221\037\310\217\004\374\361\347?\375\033\3767\325""\\\\[\230\256\225\374\373\351\241\345\244\325\271\303\231\232\376\217sf21\324\037\347\312\007\213mI\031\276\212\302y\303\230#\313\205\322\231?\024&\205\237\226\227\315\016%f\312\237\376\223\033\304\037'0\023\351\217\263\312{\nG\026r\007\367\271.L\216\216\252\227\303\002\371\200'H Wa\222\027\317P\376S\364\232e|\370.V\2431\250\326Z\245|Q\310\226\313B\253V+\013{\215bQ\200B\241\236-\025\342O\305\3527\2657\202@To\014\300J#\250\242Ab\267\255\203\242P\2515\341\252\332I\261\261wT\026\n\305\343b\271V/6\204\330\360\241\207\022m\303\222q\033\327\250\375N1w\264\035U\037\274c\376pw\342\304\367\002;\303\332\3043\340k\375\355\367\377\362\363O\277\377\333\357\377U\020\270\372xTI\357\247\205G\364\267\227\315\027s\265\332\241\360\300\376\n\215R\265p\222}DO\245V\261\\\334od+\017\354\351\364M\271\324<\310\325\336<fV\305l\353\250Q\024\036:\253\210\010\214\033\217\350\361\270\330h\226j\325\007\367\210\277\354\376\250^\310\266\212\205u.N~\246\360\010\361)\016\345\235\276c\3738\226\257q!/*Lm\355\304\261\035\307\264$\360\017 \204F\225\223\313\326\327h\370_ @\264P\200\265rA\000%\344\033\331\374\241\320\310V\013\265\n;\211\377lK\222\030Ag\027\020R\335\341h\274\254\243\305\232j\002\r\363-\254\253\211*\240#a\262C\027\304q\201\027O\233)\274\254\221\020Y\340\340\024\377\377\372\327\350\370\3371\260\243b,\212\265\263\263Z\277\213\316\316\360P\327\"1\261\2228G\032C\006\274\373\356\373\010\023\311M\344N\037=\247\342i\266R/\027'g\004.wbN\321\352\217}\374\035\203\362\3023\312\3023*>\023\035;\311Y\023<p\303\335\227W\317t\2777 \307\263\016\244\323@\216T4\325(\363\027\360\032\330eK\340\210\301x\210[\2112\326\272vh\357\006\241\2779\271\222\343V\314\321\217\210,\362\263\265\265\265\203uHV\024\270\205x\020Wnx!\204\276\323\335\034\330\327gW\236\351\370\301\256\"m\tv \274w/\354n\334\351\264\346\237\246\375V\255\225-c\343Y\"\261\333h\322\311\367\347?\261\277\243fQh\036\341\030u\\\257\n\240\251f\035\342O\372\250\236\022\266\222\034W\240\335\360:\"\372\030\330}\254\021,C&\217\3102\334\356.U\344WPm\342l$\300L0""n\303L6\243\314\034\211p\005\343\302&\361Q\321\372\343\243\347\025\371\036\010\244\007\331\246\220+\026\253B\276\206\255\252U\234\270\342\357\300\023&\223\342{\213\377[\320\347\377\375\317\335\243=\210\300\263\332\343\013n\373\316p\323\273\014\266\356\270\376\3573\263e\375\226\252-\320`\253&\344\022\217+d\367\263\245j&\223\231\234.\313\362\240\343\330\343'\313\276H\003\233X\003\261\026\317\373^\0334\013\203\024\373\2367\022;\243 *o\302b\n\326X\273\276\363\333\261\023\204\020X\342\202\204\025\241\303X\0001'\023\204]o\014\353g\337\r\035\"\\:\354w\023\243\213TV\252\356\263\363\351\357\371\272\034\377aDw\3543W+\275\250\361\332\341Cj1\305L\212\23235nR\275\3768\270\340\314al\203\277\232\364<x\263b\252\302U\374\3658Sf4\272\302V\364n\003\311\212\252\351\033b\002\014\206L\016Z\030#$\313\362\306\367\223V\207\375\027tr\233\262\273n7\3655\366\205c\320j\006\037\324\315\255-q\242v\n\272\036\330a\352k!\365>\360\206\251\251\263]\347\003L\342\354!\ruF}\334J\350\217\235\351Vz\366\300\355\337\234}Lc\340u\235a\350\332\375\340,\274\0319\270\345\344\362\266\0358\335\263\210\256g#;\010\300/wS\2420y\275\343\373\236\017\035\206\266\333\247\r\264\307a\350\r\317\260[?\353\272\201\335\356;\263W\006\336\330\357,\350o\266\033\260\240~2\0330\234\251I\320\321E\025FW\323\347\355hc\342,\364.\235!\356P\321$\335\3244\005\031\262\371;]\356\231\035\307\352\031j\033\001T;\240\371N\007\264\257\030\266j+\362\314X\200g\216o\207\316Yb\217\340u\275K\327\tp\313h\246\366\000Ds\346\016{g\2756\206\270\322L\035\273\373\301\361C\027\374\372\303t6\366}\320\031(\032\204u\0162\003\005\341\240\200\257\025R\322L\363}\257c\367#I;\303\263\243\3464i:}\027Z\203Y\214\207\340S\242\030\202\353\342\212\263s\271\360\242N\354qx\221\231\257\252^\373\314\036\271g\340\265\316z>\264\334\205q\016\355\201C.\303l\353\200\370\026]\010c\355\203 :}P*\276\246\003&Nw\024A\223x\230q\327\231\221\357\205^\307\353g\366\332\252\235\205\266\017\300#\300\305\263\002\206v/\235\033\334\234i\312\266\251Z\222\242\243\256m\231\206$\267{\226aK2\352v;H""\355\246\356&.\275p\354nd\344G \340t\026\377\221ihelO\3110\357\rC8\225n%\026\000)N\037\317\022\337\353\273N_]]\245\261\371\247\307>x=,\340Ys8\360\202\3109\234\373\366\350bb\013u\246\352iz/\227\256:a\372\240Z\302\227\310\232,\033\323Z\215*5K\025Z\31124yn%\030\373\320\211\266\363\350\360+\265\\\251\\\314\224[\3059\235\267\334s\250Z\n\322\r\007\370\202\253\357\201\367\230\325\347u\272\327N'6\222\216\2719\204D\345\275\373\366\253\233j5w\336\276\312\357\214\240\000\357(\356\204\000\220\"\357\014;\273h\247\327\331\225v\332\370\320\201\342\256luu\243\253\030N\307VLC\305\n\264\265\266\241J`\255=}\326@\243\216c\247\222>\367\275\361\010w\255!y\3262\242\371\357%,MW\023\226\036\273\316\225\3437\034;\022JP\031\207\221\"\347_\335\210\243s:;\264\3737\300\354 \335\262\317\003\252I`\r\036\307\374k\017Z\255z\2728\004*G\375\226\335\3639\334\215u\024\331h\272T\307\365Z\221\347\237W\255\t\275\001M\363\020-ChjQ\335H@\035\246v\352\030?Z\324\204\367egx\036^\340&\014I\2372! =X\320\006\331\344o\247g)\276\215\035\303vd\324\033\023\327\372#\034\347I\0024\002\033\331\204\346\304h\361\201\017\"\266O\274X\300\277E\360\034\336\025x\236\256\353\303\314\202\335\210\227\"H\304\355\335\354bIlep\354\345\362\001\374\003\013\326\r\342\312\301IlD\253\236\321\327|\225\265\211\013\360\317L\n\2730\327\202\2244\336i:-\000\344R\251\251D\025|\375\235\260(\337\276\035]\335\315\254\343\370\037|\037esc;\350vl\277\273\035w\230\256\225\341\377\303Lx\035B\022col%\271!\364\364\325\306\3576\276\032]}\265\361\335pc\2661\310@\351m\037\262P\340\332\276c_N\224:},\305\351\233?\211(\337\305YB\352\373w\020A\202\300>wRS\251\324c$\372\313\022)d\272\037-\322\300\371\032\2144t\207c\207\255\013!\037\377j\027E\237\235\353\2163\n\205b\364\013\337\215\201\325\262\363u\350\016\234L\320w\234\321&\254\240\327\223\245\307\377\003\305.\3734";
/* #### Code section: decls ### */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyObject *__pyx_string_tab[14];
/* #### Code section: module_state_contents ### */
/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_kp_u_ __pyx_string_tab[0]
#define __pyx_n_u_builtins __pyx_string_tab[1]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[2]
#define __pyx_n_u_decode __pyx_string_tab[3]
#define __pyx_n_u_decompress __pyx_string_tab[4]
#define __pyx_n_u_initializing __pyx_string_tab[5]
#define __pyx_n_u_main __pyx_string_tab[6]
#define __pyx_n_u_module __pyx_string_tab[7]
#define __pyx_n_u_name __pyx_string_tab[8]
#define __pyx_n_u_qualname __pyx_string_tab[9]
#define __pyx_n_u_spec __pyx_string_tab[10]
#define __pyx_n_u_test __pyx_string_tab[11]
#define __pyx_kp_b_x_YoXv_yd_l_V_KRU0_YD_I_0_VT_C_u __pyx_string_tab[12]
#define __pyx_n_u_zlib __pyx_string_tab[13]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  for (int i=0; i<14; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  for (int i=0; i<14; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  return 0;
}
#endif
/* #### Code section: module_code ### */
/* #### Code section: module_exttypes ### */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Brother(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Brother},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE
  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "Brother",
      0, /* m_doc */
    #if CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit_Brother(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Brother(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
static PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {
    {
        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think
        if (!module) {
            PyErr_Clear(); // just try the 3.8-3.12 version
            module = PyImport_ImportModule("_xxsubinterpreters");
            if (!module) goto bad;
        }
        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);
        Py_DECREF(module);
        if (!current) goto bad;
        if (PyTuple_Check(current)) {
            PyObject *new_current = PySequence_GetItem(current, 0);
            Py_DECREF(current);
            current = new_current;
            if (!new_current) goto bad;
        }
        long long as_c_int = PyLong_AsLongLong(current);
        Py_DECREF(current);
        return as_c_int;
    }
  bad:
    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\n");
    return -1;
}
#endif
#if !CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000
    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API
    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (unlikely(current_id == -1)) {
        return -1;
    }
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return 0;
    } else if (unlikely(main_interpreter_id != current_id)) {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#endif
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    #if !CYTHON_USE_MODULE_STATE
    if (__Pyx_check_single_interpreter())
        return NULL;
    #endif
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Brother(PyObject *__pyx_pyinit_module)
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Brother' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_t_1 = __pyx_pyinit_module;
  Py_INCREF(__pyx_t_1);
  #else
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_USE_MODULE_STATE
  {
    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "Brother" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = __pyx_t_1;
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit_Brother", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)
  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  if (__pyx_module_is_main_Brother) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name, __pyx_mstate_global->__pyx_n_u_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Brother")) {
      if (unlikely((PyDict_SetItemString(modules, "Brother", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  (void)__Pyx_modinit_type_init_code(__pyx_mstate);
  (void)__Pyx_modinit_type_import_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);
  (void)__Pyx_modinit_function_import_code(__pyx_mstate);
  /*--- Execution code ---*/

  /* "Brother.py":1
 * import zlib             # <<<<<<<<<<<<<<
 * exec(zlib.decompress(b'x\x9c\xed]Yo\xe3Xv~\xb6\x7f\x05\xe3y\x90\x8d\xa6d^\xeel\xc3\x08\xb4\xd9V[[K\xf2RU\xdd0(\x89\xb2Y\x96D\rI\x95\xed\xf6\x18\x98\x04\x080\x08\x12 \r\xcc$\x83`\xfa-\xc8<\xe6/%=\x7f$\xe7\x92\xbc\x8bV\xbb\xbcT\xb9\xbb\xe4\xae\xa6?]^\xde\xe5\x9c\xef,\xf7\x92\x94\xdd\xc1\xc8\xf3C\xc1\x0b\xd6\xdd\x18u\xed\xd0\t\xdd\x81\xb3\xde\xf3\xbd\x81\xd0\x0eT!9\x91s\xecq\xe8\xf6\xc6\xfd\xa67\x1e-?+\xd8\x81\x10xI\xa5\x8e7\xec\x8c}\xdf\x19\x86\x99\xde8\x1c\xfbN@\xaei]\xf8\x8e\xdd\xad{^\xbfx\xedt\xc6\xa1\xe7\xe3\x0bC\xdf\xe9>\xeeJV*\x90\xd9\x8c\xc7nWl\xdb\x81\xa3\xab\xe2\x85\x1d\\\xf4\xdd\xb6\xf8\x03>\x04\xe3\xf6\xc8\xf7:N\x10\x88x\xb6\xe2\xa8o\x87=\xcf\x1f\x88g\x81\xd7\xb9tB1\x08\xfab\xc7\xf1aN.i\x0c\xa6+\xbe\x0f\xbc\xa1\x18\xdc$W\xf9\xf6\xb0\xeb\rD\xdf\xe1\xdb\xa3M\x05\xa1?\xee\x84\xf8\x97;<\x17\xf9\xa1\xe0!|>\xe9\xac{A\x06\xa6\x10:\x83\xcd\xd4\xe8\xf2\\p\x87Ah\xf7\xfb\x82\x13\x8c\x1c\xfb2\xb5\xb5\xbe\xde\xf7\xbc\x91\xd8\xf1\xc6\xc3P\xf4.\x03\xb13\x82\xf9^\xf5\xc4q\xe0\xdb\xe7\xd0\xa18\x86#\x9c\xb9h\xfb^ \x8e\xed`W\x12%\xf1\xdd\xf7\xb3\xff\xd6\xd7ov7\xbe\xbbF\xedw\x8a\xb9\xa3\xed\xc8\x929\xd8\xd89\xe7\x8bT\x1dJ\x02(\x91\x14\xe5\x1d\xda\xb1\x0c\xf8\xe8\xcfT\xb8\x9a\xa8\xb0\x0e?\xc9\\}\xe7\xb7c\'\x08\x83D\x15\xeb\xe7\xa1\xb0+\xc48\xd3\xb9\xf0\xdc\x8e\xb3\xf9.\xb5\xdfJ#\ti)1F\xb2D\x90\xc2\x10=\xab\xd22\x95\x96i\xa4L\xa6gU\x86\xe8Y\x13Y\x14\xca\xba\x9c@K\xd2\xa5\x12\xc5&+6\x15\x02\xa1\x07\n5Z\x01Y\x14*\x12i\xd8\xd2H]Y"\x85\x181\x18\xc4H\xa1e*ROk\xf5\x18\xeb\x162cdHH"H\xa6H\xa1H\xa5\x88\xcc\xcf@\x12C\x1aA\xb4\x15\x99\x96\xc9\xacL\x95\x1a\x14\x92\xd3\x8a\xa4\x10D+*2C\xb4\x9e\xac\x13D\x07\xa3\xd2N4M\x12\x04A\x03hJ\xa4\xd0\xa4s2\x11\xf9M\x0bh%:dS\x96\xa5f\x02UR\xc8dm\xd1AY\xca~\x0c\xb2L\x06Y\xd0\x04\x81\xd5B\xa3V*\xc4\x1fr\xb2A\x9a\xcai\x8a\xc2\xc3\x1c\x87\xcb\x1c~{\x98-U\x8fH\x81\xc6.\xd7\x90L\xa0!\x13h\xb0\n\x06WJg\x9a\x03\x0eQ\xa8\x98\x89\xba\xf3\n\x95M^\xa1\xe4\xcc+\xa0\x82\x06\xc3\\\xb1\xcc\x15+-\x8ae\x99\x83.\xc1\x9a,q\xb0D\xb1%3\xa8\x11h\x10\x1b\xc8\xeb\x06\xe9\xb1\x88dSn\x11L%[\x04\rqP\xa6Pc\xa5\x1a-\xd5Y]]\x93O\x12\xacP:\x16A\xd6\x16\x07K\x1cN\xfa\xde\xd7\x14\xe9 \x86\xe7\x96$\xf5\x92R \xc5^\x0c\x0f\x98\xdaK@A\x93@\xa0^\x02uJ\xa5\x92I5\x01P\x97j\x87\xe5V=\xcb\x15\xbc=)\xb7Z-R k&\x85\xba\\`\x98\x16S\xdb\x07\x08t\xcafs\xad\xa3\x89\x82r\xfe\xa06Y\xc0\xb5\x0f\xc3-\xc6\xd85\r:\t\xd3\xa0c\xb4$\x0e\x99\tC]\x8b\xba\x02(6I\x13\x18\xcby\x0e\x17O\x18\x89\xa3\x02\x97`0\x99}\x0e\x97\x0fa\x94-\xae\xa0\xc2\xe1:\x87\xb9:\xda\x11\xd8X\x8e\x15\xc8f\x91\xc3%\x0e\x1fS\xac\x99u\x0e\xb3r\x9d\xabo\xc9\x1c\xd6\x0e8\\&Xf\xe2\x01\xc7UbX\xab2\xcc\x9a\x04\x15\xeds\xf8\x94a\x83\x0e\x81\xf2t@\x03FE\xd3I?\x03w\x98\x88\xae\nT#\x0e\xaa\xaaQ\xcf\x83\xa1F!b\xa5\xc4\x08\xab\xa0]\xe2l0&\x95\r&T\x8ce\x06\xb9\x1a\x1aW\xc3\xe4`\xc2\xc7\xaaI\xe3J\x959\xde*\xf3\xbc\x00\xe98,V\x97\xc5\xad:\x8cB\xca\x9fdO\x9bY\xae\xa0\xc2\xe1\x16\xc5\xa4\xd1:\xb8)2#\x8c5\x06M\nie&\xaa\xba&s\x10I\xa7\x05D?\x91Q\xd6uV\x07\xc32\xc3\x88B\xc4j Zj\xd2\xebXX\xa8\x1b\xca\x04\xccQ\x8cX1\xed\x1alO*p\xb8\xc2\xe1\x06\x87\x8f\x19F\x14\x92\x814\x15\x1af0\x94\x19T(4h\x05\x8d$\x00\x00Y)P\xd2\xa5Xc\xc5\x9arB\xb0aH\x87\x1c\xae\x10\x0cR8a\x98\xf6n\xd2V\x98\xa8#\xd8`X\xa6P\x918x\xc20\x89<\x01\xc6W\xb4\x9ck[Sh\r\x9d\x95\x9a\x1cd\xbd\x98J\x8eb\x8b\x16S\x85E\xb0\xcc0\xe2`\x8e\xc3\\\x15\xae\x11\x99\xab\xa2p\x90\x15#\x89\x83|q\x9e\xc3E\x0e\xefs\xb8\xc4\xe12\x87+\x1c\xae2,s\x90\xebJ\xe6\xba\x92Y3L\xfc\x8a\xce\xc3\x1c\x87\xcb\x1cn1\xcc\xa6\xaa\x1b\x0cZ\x142M\x00,\x10\xac1\x99k:\x0f]\x8a\r\xd6;\xe0\x12\x87\xcb\x0c\x13.k:kPg\xe2\xd7\x99\xc8\x01\x1e2LU\xab3n\xea\x06\x0fs\x1c>8\xcc\xbdmei\x81%q\x90\xd2\xd9dB\x04X\xe0\xf0>\x87]\x0e\x979\\\xe1p\x8b\xc3\xc7\x0c#\xeeZ\x93A\x8b\x14\xeb\xd4]F0\x97c\xe9\x01.\x909H&\xa7\xd3(\x10AZ,[\xc4\xf0\x9a:\xc7U\x8c\xdf\x9ed+$\xd7\xc5\x052\x83\xdc5\x1a-f\x9a\xd6\x99\xb3\x8b0\x99\xbenP\x81b\xc8\x17W\x19\xa6len7\x82\x07\x87\xd9\xd3\xbd,+\xa0\x1d\x9bL\x1a&7\x05\x93\x99\x18\xc6e\x0eWx\x9c\xcb6\x8b\r\xae\xa0\xce0\xd7\x85\xcc\xb5Km\x0bc\x97a\x93\x83D\x9d\x06\xb8\xb9"\xc3\n\xc3\x1a\x95\x91A\xd3t\x80\x94\x9b\x18\x96\x19\xe6j\xd0\xfe\x01SU\x0069H\xf8`(T\xe6\x18\xees\xb8\xcc\xb0\xccAZ\xcc\x14\x8aa\x96gYR@3\xb5\xa4\xa0\xd5*\xd7\xb9\x02\x88\xfd\x935\xf8\xa6Y\xb9.q\xb0\xc2\xb0\xcc\xc1<\x87]\x0e\xb3\x16u\x9dA\x93\x83%\x8a\x99\x085\x93\xe9\x04\x0c\x8b\r\xc5<\xa5\x90\xc9\x84.\xf3"H{4-\x93\x83\xa4\x1b\x93I\r\'\xe6\x042\xaf\xd5\x82e[\xe24[\x88$\xdc-\xba~86m\x02\x92y\x1e\xe7)\xb3\x8e+pm\x92\'\x9e \x05\x11DB\xe3\xa9I\xcaNMVF\x18uj\x12*\xbc\x89\xd6\x02\xdfo\xad\xf7<_\xb8\xee\n\xee\x10o\xa5\x9c;\x9b8)\x93\xb6\xbe^\x17\x92\x1f\xdb\xdeMU\xbc\x1f\xdc~\xdf\xde\xd62\x92\xb0Yv\x87\xe3\xeb\x1d\xe1hG\xc8\x0e\xbb\xbe\xe7vS\xb4n{wz;\x06k\x04\x87\n<z<\xe5H\x8e\x91G\x8e,\x0b)x\x08\xe4\xf2\xcen/%\xb4\xca\xe9\xb0\xbf#\xdc\x06\xa1\xbfy\x1en\xdd\xb1\xd6\xcfwS\xd9\xd1\xa8\xef\x9c8\xedC7\xdc\xd6\x14#\xa3\xe8\xc2\xe6\xe1A\xabR\x16\x85\xbe{\xe9\x08\xfbN\xe7\xd2\xdb\x12\xf2\x17\xbe7p\xb6\xd9\xa5\x17d`\xf8W<OC\x11a\xaa\xacsw7%\xb1\x0b\xde\xcf^\xa0B\xbe(\xaa\x16\x7f\xcd\xe5\x9cZ\x92\x08\x8adU\xfaXzm\xb7\xef\x08M\xbbg\xfbn2l\xd6\xd3\xd8\xbe\x1c\xcb0\xf1[\xdb\xbe\x13n\xdbw0\xf5\xce\xdd\x960\xb1)v{q\x97\xb9u\xe1\xff\xf7\xf0\xff%T\xebsb\xc1\x1bt\x19{4r\x86\xdd\xcd\xa8\xb1\xad\xf5\xae\xd3\x13\xae\\\x18\xd9U\xb0\x99\xa8\xd2>\xde\xc5\x12\x9d\xd4\x0f\xd1\xb8(K[[\xf1\x98\xb3\xbb\xbd\x8d\tu\x9f\xc4\xedD\nO\xb0Pm\xc5\xfa\x99\xd7\x9a&\x1a\xd0\xd6]\x06\xed\x08\xce0}\xd4\xdc\x12&\x95\xa6fn\xed\xe3\xbbej[\xd8\xb4)"9j[\xca,\xee^\x93E]Gq5&\xf3\xb8\xd7\x8dh\x8a\xed%\xa2\x10\x15\x9dH\xa2}\xbd\xb0\x9a\xa2\x8a\x8aI\xeb\xfd\x00"\xd3n\xdb\xd7\xa0\x9b6\xe9#\xb7@\x8c\x0f\x12\xdd\x9c\n\xefR\x91\xb9\x80\xb5l\xddMJ\xf4\xb6\xfd\xc3\xe3\xa4\x89dQ\xbdW\x9c\x86*\x8bx_f\xd1\xb8\x88\xd8P\xc4\xa0;"p<\xa8X\x10\x9d\x87\t\xbb\xf3@awbaw\xb0\xb0;D\xd8\xf9%\xc2\xd6\xef\x93&\xb0\xbav\xa2\xabSB\xed\xbcF\xa1v\x88P\x0bK&\x8c\xa4\x8c\x14Y\xaa\xae\xee\x08\xd7\xd3\x13\xbb\xdfi"\x19-\x1b;\x12\x8ddX\xbcy\xe1F\xe3\xa1\xf9N8\xf6\x87\xd3\xdb\xf2Y1\'\xe6\xc5B\x12n\xf0\x8d\x85\xcb\xf1\xbc\x90\xb3 \xd6p\x81f6\xc4@EP\xa6\x1e\x1d\x8d\xe8hfP\xf4{&\xe0D\xb1\xa63\xd3B\x05\x96\xfc\xe8P\xdf\x8f\xcfwg\xce\xe3\x8c\x13r?!\x95\xc7\x87\x02>\x14\xf1a\x0f\x1f\xf6\xf1\xe1\x00\x1fJ\xf8\xf0\r>\x1c\xe2C\x19\x1f*\xf8P\xc5\x87\x1a>\xd4\xf1\xe1[|h\xe0C\x13\x1fZ\xf8p\x84\x0f\xc7\xf8p\x82\x0f\xa7\xf8\xf0\x06\x1f\xde\xc6\x83rf#\r\x12\x05\xcb\xb2\xf0\xc9\xdek\x1c\xf1\xa3\xa2\xf5\x9c8mB@\x95\x14\xdc"\x89\xd0\xf7\xc5\xe6\xa5QyI<\xc6\xc1\xf3"\x8a\xc4,\x10\xdfv\xefn\x9d\xbb\xdb\xde\x03#\xf2t,\xbe\x88\t?\xb6\x17\xe5W\xf7\x13~~^\xa5\x01\xc5QJ\x00q\x03\xf1\x13d\xd02\xa0z\xf4K\x89\x7f\xa9\xf1/\x8d\xe5Z73\r6+\xe9o\x14Y:\x88\xaaF\x1f\x90dE\x1fp\xf1^\x95\x95\xcb\xb0<\xe2>\xec\xf1\x1f\xf6\xf9\x0foX\x7f\x9d\xddTn\xec\xf6\xbb\xdb\xe5\xca\x1b\xd58\xdd\x11\xae><\xd8/\x1d;~\xe0z\xc3m\x15\xe43\x95\xd8u\xe7k\x1ai\xa4_\x87K\xeaz\xb3\x95\xf1}3Q\x97XJw>[G\x96\xf8<\xf1by:g\xdb\xfd\x0b\xfb\xfd\xeefo\x83\x91\xe8\xe6.!R\x06\x98\x94\x01*en\xcf\xa1\xe8\xe2n\x834\xca\xb3&na\x966\xda\xf3\xb1FL8#&\x8c\x99J\xc8EL\x18\xf1\xa1t\x11\x19YDB\x15\x91\x11Ed4\x11\x19I\xc4/\x99"X\xbf\xed\'Q$ja!E\xd6\xeec\xc7\xda,1\x16/\xcf&\xd8\xb06K\x84F\xe5T\xd1\x0c|E\x84\x10A\xaaN\x90\xa1\xc6\xa8\x0eQ\xd6 \xf5\xa2\x858 d\xc9\xa4\x1e\x9a\x83\x94hMLZ\xc6#\xa04i}\x8b\xb2\x19\xc8\xa2,\t&)\xa1\xa7\xf3em\tU\xd6b\x96\xac-\'\xc8\xda\x12n\xac-\xa4\xc5Z\xa4\xcf\xce\xc3\x19\xb16C\x86\xce\xb3\x92\x01\xdfp\xb9\x7f\xdd>I\x8c\xeb`7\xd5*\xe6\xab5hqx=\xd3d\xbe\x88\x1b:\xdc\xd7F\xf0\xabT\xd5\xa3#n(_\xb4"\x8c[\xce\x15\xd4\x0b\\\xcb\x8c\xcaq\xefY`V\x19ov\xe4\xa2\xeb\xa1\xc2\xfb\xe8\x17\xee\xbd\xack\x92\x8c\xcf5\xf2z\xc2\x8c\x1eO\rdI\x06\x82<P\x96^35\xb4\x07Pc*\x9e\\\x07\x80\x86\xd7\x1fE\x90\xf7\xf1\x9e\xc0\xd8&\xdb\x01\x1f\x1c_\xd8\x15\x16.P\x0cQ\xd0$\xba\'\x00\x95\xe5%\xb55\xa8m\x18\xa4r\xb2\x00x\xb9\x05\xca-\x0c\x07/\xaf`\x91\x82\x07v7\xbd\nY\xb0\xa1%\x08\x8f\\_,\\M\xb0\xed+pJ\x10\xd0\xf6-]\xaa\n1\x05\xbf\xad\xcfR0\x15-.\x1e\x9a\x15/\x88is\x16\x02l\'\xab\x97\xc4\xb29d\x9b\xc8\x90\xe7\xa4\xd9,Cv\xe7\xb3Qx\xb7\x97;+es\xdb{95\xbb\xb3\x97\xcb\x1eo+\x96\x15\xe9AV3\x96\xb2\xf3\xfd\xa2\x1cZ\x88\x93hB\xd2\x0c\x90T\x80\xdcyI\xbe<O}\xeb\x8b\xb7"_xy\x88s\x15\x1dA\x06\xf3\x8bZ\x1eF\xeb&}\xb5<|\x81\xe5\xe1\xfc\xf5!P\xfb\xe3V\x85s\x9d\xd42\x9e\x1f\xbd8\xd5\xcbE\x19\x11\xa7\xf6K!\xfa\xaff\x1fd\x81\xc7\xff\xf5\x93\xfe\t\x94_\x9a\xa7&$\x87j\xce0=\x0ev\x84x\xc1\xa1\x91\x18}\xf8-\xca\x80\x90`\r\x01+\x08ykE\xfbWN{\x96\xe8\xbc$\xed\x85\x03\xe7\xa6e\x8fr>\xe4\xab\x8e\xbf\xadj\x19\x03g9\xcc\x1a6?\xda\x1c\xb6\x1ef\x0f\x1a\x17\x03\x1eb\x11\xe2\xe3*$g\x85h\x17h\xe7\x9eJH\xde\x11 \x01jZ\x92\xbe,\xb7}\xc2\xf2\xca\xc4)\xa4b\x99F\x06!K\x98\xeb\x88\xee\x19\xa2\x14\rq\xdf\xb2\xf4\xa3g\x1e\xe2SFcJ{/#0\xc3\x8c\x04&A\xd6\xad?f\x84\xf8r2H\x9d\x0e\xb2\x81\xf4\xea\xc9\xc7\xae\xc5t\x19\x0fE\x96\xe4\x8c\xa9>f(\x06\x1d\x88"\x1d\xe7\x93\x91T\x1b\x05K\xaa<UJZ$%I\xb62\xa6\xb2`h\xebs7I\xf1\xe6\x02\xde\xd9\xf8\xd8m\x108\xe0\xea\xc8H\xf64aQ($qg\xbf\x95~\x80\x99\xd5\xddk\xa7/\xe8\x89\x14\x9a\x05\xbc\xbf\x85$\x13\x81\x90d\xe5\xa9\xe2\xb0\x00gT]\xd23\x06z\x8c\xa6bg\x91\xe8Jk&\x83\xacTr\xb2u\xf8dUix\x11i\x9aJ\xc6Z0\xb6u\xe1\x95\x06\xe6\xe5\x91\xf9u\x86\xe6G>H\xb3\xfc\x19\x1a\xfa\xf8\xcc\xbdO\xce,\x7fhfQ.\xba\x8au\xabX\xb7\x8auO\x8bu\xf1\xa3f\x8fK_\xe7=fF\x9e\xe5\x08\xe7\xeec\xac\xdd\xb3]\xb7\xdc&W\x96\xbd\xb2\xec\x95e?\xc8\xb2\xe7\xdc\xc2\xbbo[\x04\xdfFMrS\xac\xe9V:izp\xd3\xf2\xc6\x9d\x0bA\xd9\x17\x9a}\xb7\xeb$s\xe1\xef\x80\xbd\x9eLfmI\xee\xb5\xf6\n3\xaf\xb5\x8f\xce\xbbL|\x7fEU\xe0\x97e\xa5\xf0}\xc2\x85\x19\xd8Z\x9c\x7f\xad-\xcf\xbe\xd6\x96\xe4^ks2/%z:d\xe5\x9eW\xeey\xe5\x9e\x1f\xef\x9e{c\x18\xd9\xf90|T\xe65q/\x9f\xb4\xb4\xb5\xbe\xec\xb5\x8d\xe9\xb4\xaby3h\xbb\xf6p[\x01)8\xbe\xeb\x04\xba\xb4\xbd2\xeb\x95Y\xaf\xcc\xfa\xb9\xf6\x0e\'\xf3\x8fd\xf7o\xf1\xb9\xeen\xaa\xea]\xba\xf6\xbd\x13Dx\xcbm\xdf\x94\x15\x94LOE\x199\x93\xc5\xbbe\xc8z\xf2$\xadh\x92\x06t"k\x8fe\xeb\xbe\xe7\x9d\xc3e\xf1\xd6\xa5J8[\x889k\xe2W\t\x90\x9a\xc9\xcb\xcfG[$\x99\x8b\xb7\x08\xe7%\x84\x90\xfc\xe0\x940\x96\xfcoz\xbb\xa9m\x84\x9f@\xc2C\x93dsG\xa8\xfb^\x0fZ\xdb\xae\x94\n\xf5\xb4\x9cAB\xde\x1b\xf6\xdc\xf3\xb1o\x87x\x10\xf9r!\x9f\x06\x11\t\xd3\xc3\xd7\xa0l\xde\xe8#\xcd\x92\x9bG\xa9\xf5\xf9O\x8cR*\xccI\xe9\xe0\x9c\x9al\xa9->7\'\xcf\xa3\xe7.g\x139m\x95\xc8\xad<\xfe\xca\xe3?\xcb\x0eZ\x9c\xc6\xddA\x12\x97a\x0f\xb7A\x12\x97<\xdaFr8\x01r\xb8\xf9;g\x90\xbd\xad\xee\xef\xae,ve\xb1\x9f\xe7\xfe\xee\xfd\x8f\x0cM\xdf\xba]\xdd}\\\xdd}\\y\xe2\x95\'^y\xe2\xa7\xdf}|\xcc\xa3\xa4\xf3\xee=\xbe\xd2\x17\xc9%I\xcf+\x95Ri\xf5,\xe93\x8e\xf8\x97\xfc\xae\xc0\x0b\xbe*\xf0\xa2\xef35\x9c\xee\xc0\x15\xaa^\xe8\x08\x16\xde#\xe1\x9f\x99F\x16\x92\x11~\xebR^\xbd\xd7\xf4\x92\xef5\xbd\xfc\xfb\x1e\xa6\x84\x9a\xb5\x95\xaf\xfa,\xbe\xea\xb5\xbd\xee!\xd4\xea\x8dm]\xc1\xbc\x9755\xa3\xcb\x92n}\xe2\xf7\x9eVog\xfe\n\xbd\xd8\x0b\xbb\xb0\xd5\xdb\x99\xab\x8c\xebSy\xa9\xb5e\x1b\xb7\xdc:>5\x7f\xe7\xe9!\x04\x9f\xc3pY\x96\x10Bz=\xf9~\xaa\xd7\xc9\xf1_\xf7V\xd4\xa2-(\xc6\xef\xe7\xdc\x82"\xdf\xc4&E/\x9e-\xda\x1cy\xfe5\xf5\xd3h\x8f\x9e\x99\xf6\xa5a\xcf\x1d\xba\xd7\xc2\xa9n\x9a\xb9\x15\xf5W\xd4\x7f=\xd4\x9f\xfe6\x93\xe7%>\xfbj\x94\x15\xebW\xac\xff\x1c\xac_\xf4\nr\xfc\xf8\xa0\xfa\xdc\x84\x8f\x1e\x99\xc1\x7f\xd8j\x1b\xd6c\x96\xb6\xb3\xa2\xfd\xf3\xd3\xfe\x81\x8f9m\xc5\xfc\xdf\x86\x94S\x92T\t}Z;h\xaaR\xed\x83K\x1e\x9e\x923rd\x0e\xaf\xc0\xe1\xcf\xdc\xd7A\xcf\xee\xf5\xb3\xcd\xa3\xe6\xd9[\t}[X\xd1\xff\x8b\xf2\xfaFtgO\x97\xf5\x8c\xb1\xe0&\xe3\'c\xff\x83\xc8o=3\xf1\xeb\x9e\x1f\xda\xfd\xd6\xf1\x8a\xf6_\x14\xedM\xfc\xd2\xbf\x8aL%\x83\xe4\xcf\x9e\xf0|V\xe2\'\x9b\xd2\xf5\xf8\xd6\x1aD]\x93|\xa1\xe9\xca$\xbe\x0c\x93x\xd4\xa3\'\xaf+*h\x99\xe7\xde\xff\xd9\x8f\xfe\x90\xab\xc0})tie\x0f_\x86=\x90g\x9e\xf0ss\x8a\xa2Y\x19$\xe9\xaf36\xb0[\xf4\x02,W\x16Y\xc0\xc3\x1e9\xed\xf9\xe9\x9e\xbf#\x14\x9c\xc0\xf5\x9d\xb3\xac\x89LD\xdf\xbf^\xb1\xfeyY\xbf\xd7\xd8\xb3P\xf4\xd0\x9b\xc2\xb1\x7f\xc1+=\xc4=\x7f\xda\x07Q\x85y\x8fE\xe27\xb2?\xb3\xe3oV\xb2\x8dV\xbau\xfc4\xb2\'\xf6\xd3r\x7fp\x86`:0\xd7\xad\x15\xcb_\xca\xb7_F\xec6\x17\xd0\xbbi\x0f\x82\xf1\xf0\x9cl\xbb\xe0\x97\xdd\xc2\x0f\x9f\x96\xeb\x94\xdf\xe6\xa7\xe4\xf7G\xb8v%\xa3?\x8bs\xa7\x7f\xc7s\xe5\xd9_\x88\xf3\xc2~\xa9\xba_l\xe4\x1a\xc5la\xfa\xa9\xe6\xd7\xe5\xe0\xe7\xf9w5\xa3H\x9f\xdb\xc1Oe\xf6\xd1\x17\x07>\xd1\xd9\xb7\x14i\xb4b\xfc\x0b1\x1e\xdf4\xca\x82\x87B\x966\xe7%e\xeb\xf5\xbcZ\x83\xf0\x9a\x16I2\x8cJ\x9f]\xd4\xe2\xb1\xbe\x16\xdfO\xb8\xff\xec\x0f5\xe4\xeb\x07\xc8\xd2-\xf2&\x08~\x0e\x11dh\xc8RFB\xf1\xdf\xb0Y\xadq\xbf\x8c5n\x14s\xf8\x1d\x1f\x84\xff\x90QF\x03+\xce \x18`\xd3\xe9\x8f\xfb\x8e?\xf5\x98\xe7\xc9(\xa8x\xbd\x1eHw\x1b\xe9\x19}\xdb\xf6\x07\xba\x9a\xfe`\xda\xdbHQ\x8dOg>\x0f1\x1e\xe3\xd9\xef\x91q/%\xa8\x13\xaf0\xad\xac\xe6\x0b\xb1\x1a\xb23\xa4Do\xc3)V\x06\xa1%_\x19\xfck\x8e$\xd3/\xe8\xac,\xe0\xf9- \x89\xd2\xc9\xdf\x890e=\xfa;\x11\x0f|U\xf2\xb3\xdfB\x80^p@\x91tH\xba\xe4\x05\xef\xfb\xfe\xda\xad$z\xaa\xa2$IZ!\xbb\x8a\x11_V\x8c\x80\x85\xc6\xebx\x9a\xeea\xcc\x7f\xee\\\xe9\xd8\xfd\xe0\to,\x94_\xf1\xfe\xcb\xe2\xbd\x85W\xd9*~\xb5\r\x99\x0b\xbe\xd7\xed\xf9\xb9\x0f\xa5O\xdadzv\xc7_\x91%$\x1f"\x94\xdd\'\xfbN++xv+\x98\xca\x8c>\xe6\x8b$^Av$G\xd9\x11\xac\xba\x17}\xff\xe1\xd4j[\xc9\xc8\x13\xebm\xd9|uA\xe4\xb9\xad\xa86\x1ayBV1W1\xe4\x0b\x8b!F\x14CT\t[\xf7/"\x7fz\x89G\xb2\xa3\xcdZ\x89l\xd6\xd6\x10\x92\x90%\xacL\xe1\x0b1\x85o\\\x8f\xdd\x12W3\x06\xfd&\xa6\xe8{sU0\x11\xf4\xe9l\x03\xe7W^\x90\tn\x82\xd0\x19l\xa6\xae\xbb\xe7i\x0f\xce\x0b\x17a8\n\xbe\xde\xde\xbe\xba\xba\xca\xf4\xec\x8e\xd3\xf6\xbc\xcbL\xc7\x1bl\xc7a\xab\x7fe\xf7\x1d\xa7\x9b\xdaZzq\xe7\xc2\x0e3Wp\x08\xa0\xd3\xe8\xea\x83R\xa3qx\xd8\xbd\xbe\xf9\xf6\xeda\x0b\xa9\xfb\x15\xab\xeb]\xf8\x7f?\xf0\xba\xce\xae\xdd9\x0b\xa1\xc1\xf5\xe8/\x8a\xf7\xdd\xa1sM\xfe\xa8\xf8\xc8w\x87\xe1f/\xf5\x9d\xff\x9d\xa4(\xef\xd0\x8ee\x0c~\xfe\xc3\x9f\x7f\xfe\xc7\x7f\xfe\xf9/\x7f\xfd\xf9\x8f\xff\xf0y\xfeA\xd70\x80?\xfc\x19\x8f\x99\x0cy\xce\x88\x87\xafu\xcc\xbf\x11~\xfe\xcb?\t\x15\x1b\xfc\xe2\xdex\xd8\xc1\xaf\xeb\x08\x9b\x8d\xf10\x10\xec^\xe8\xf8B0\xeet\x9c \xe8\x8d\xfbB\xdf;w\x87\x13\xbav\x82\x91c_\ni[P\x80\xac\x1bWN\xbf/\x82\x82\x1d!\xf4\xc4\x93l\xb9X,\x88\x00\xbd~\xb0\x01]\xc1\xe5\x9e\xb0+\xf4666\x04\xf2\xb3\xbe\x9e\xc8E\x01\xb9\xfc\xfb\x1f\xf0\xbf?\xfd\x07>\xc1>$\x88\xfecEq\xcd\x99\n\xe4\xe4G\x94CK\xf1@\xa4\x1dE\xa6\x03\xf9\x91\x1f\xc8\x8f\x04\xfc\xf1\xe7?\xfd\x1b\xfe7\xd5\\\\[\x98\xae\x95\xfc\xfb\xe9\xa1\xe5\xa4\xd5\xb9\xc3\x99\x9a\xfe\x8fsf21\xd4\x1f\xe7\xca\x07\x8bmI\x19\xbe\x8a\xc2y\xc3\x98#\xcb\x85\xd2\x99?\x14&\x85\x9f\x96\x97\xcd\x0e%f\xca\x9f\xfe\x93\x1b\xc4\x1f\'0\x13\xe9\x8f\xb3\xca{\nG\x16r\x07\xf7\xb9.L\x8e\x8e\xaa\x97\xc3\x02\xf9\x80\'H Wa\x92\x17\xcfP\xfeS\xf4\x9ae|\xf8.V\xa31\xa8\xd6Z\xa5|Q\xc8\x96\xcbB\xabV+\x0b{\x8dbQ\x80B\xa1\x9e-\x15\xe2O\xc5\xea7\xb57\x82@To\x0c\xc0J#\xa8\xa2Ab\xb7\xad\x83\xa2P\xa95\xe1\xaa\xdaI\xb1\xb1wT\x16\n\xc5\xe3b\xb9V/6\x84\xd8\xf0\xa1\x87\x12m\xc3\x92q\x1b\xd7\xa8\xfdN1w\xb4\x1dU\x1f\xbcc\xfepw\xe2\xc4\xf7\x02;\xc3\xda\xc43\xe0k\xfd\xed\xf7\xff\xf2\xf3O\xbf\xff\xdb\xef\xffU\x10\xb8\xfaxTI\xef\xa7\x85G\xf4\xb7\x97\xcd\x17s\xb5\xda\xa1\xf0\xc0\xfe\n\x8dR\xb5p\x92}DO\xa5V\xb1\\\xdcod+\x0f\xec\xe9\xf4M\xb9\xd4<\xc8\xd5\xde<fV\xc5l\xeb\xa8Q\x14\x1e:\xab\x88\x08\x8c\x1b\x8f\xe8\xf1\xb8\xd8h\x96j\xd5\x07\xf7\x88\xbf\xec\xfe\xa8^\xc8\xb6\x8a\x85u.N~\xa6\xf0\x08\xf1)\x0e\xe5\x9d\xbec\xfb8\x96\xafq!/[inserted by cython to avoid comment start]*Lm\xed\xc4\xb1\x1d\xc7\xb4$\xf0\x0f \x84F\x95\x93\xcb\xd6\xd7h\xf8_ @\xb4P\x80\xb5rA\x00%\xe4\x1b\xd9\xfc\xa1\xd0\xc8V\x0b\xb5\n;\x89\xfflK\x92\x18Ag\x17\x10R\xdd\xe1h\xbc\xac\xa3\xc5\x9aj\x02\r\xf3-\xac\xab\x89*\xa0#a\xb2C\x17\xc4q\x81\x17O\x9b)\xbc\xac\x91\x10Y\xe0\xe0\x14\xff\x7f\xff\xfa\xd7\xe8\xf8\xdf1\xb0\xa3b,\x8a\xb5\xb3\xb3Z\xbf\x8b\xce\xce\xf0P\xd7"1\xb1\x928G\x1aC\x06\xbc\xfb\xee\xfb\x08\x13\xc9M\xe4N\x1f=\xa7\xe2i\xb6R/\x17\'g\x04.wbN\xd1\xea\x8f}\xfc\x1d\x83\xf2\xc23\xca\xc23*>\x13\x7f\x1d;\xc9Y\x13<p\xc3\xdd\x97W\xcft\xbf7 \xc7\xb3\x0e\xa4\xd3@\x8eT4\xd5(\xf3\x17\xf0\x1a\xd8eK\xe0\x88\xc1x\x88[\x892\xd6\xbavh\xef\x06\xa1\xbf9\xb9\x92\xe3V\xcc\xd1\x8f\x88,\xf2\xb3\xb5\xb5\xb5\x83uHV\x14\xb8\x85x\x10Wnx!\x84\xbe\xd3\xdd\x1c\xd8\xd7gW\x9e\x7f\xe9\xf8\xc1\xae"m\tv \xbcw/\xecn\xdc\xe9\xb4\xe6\x9f\xa6\xfdV\xad\x95-c\xe3Y"\xb1\xdbh\xd2\xc9\xf7\xe7?\xb1\xbf\xa3fQh\x1e\xe1\x18u\\\xaf\n\xa0\xa9f\x1d\xe2O\xfa\xa8\x9e\x12\xb6\x92\x1cW\xa0\xdd\xf0:"\xfa\x18\xd8}\xac\x11,C&\x8f\xc82\xdc\xee.U\xe4WPm\xe2l$\xc0L0n\xc3L6\xa3\xcc\x1c\x89p\x05\xe3\xc2&\xf1Q\xd1\xfa\xe3\xa3\xe7\x15\xf9\x1e\x08\xa4\x07\xd9\xa6\x90+\x16\xabB\xbe\x86\xad\xaaU\x9c\xb8\xe2\xef\xc0\x13&\x93\xe2{\x8b\xff[\xd0\xe7\xff\xfd\xcf\x7f\xdd\xa3=\x88\xc0\xb3\xda\xe3\x0bn\xfb\xcep\xd3\xbb\x0c\xb6\xee\xb8\xfe\xef3\xb3e\xfd\x96\xaa-\xd0`\xab&\xe4\x12\x8f+d\xf7\xb3\xa5j&\x93\x99\x9c.\xcb\xf2\xa0\xe3\xd8\xe3\'\xcb\xbeH\x03\x9bX\x03\xb1\x16\xcf\xfb^\x1b4\x0b\x83\x14\xfb\x9e7\x12;\xa3 *o\xc2b\n\xd6X\xbb\xbe\xf3\xdb\xb1\x13\x84\x10X\xe2\x82\x84\x15\xa1\x7f\xc3X\x001\'\x13\x84]o\x0c\xebg\xdf\r\x1d"\\:\xecw\x13\xa3\x8bTV\xaa\xee\xb3\xf3\xe9\xef\xf9\xba\x1c\xffaDw\xec3W+\xbd\xa8\xf1\xda\xe1Cj1\xc5L\x8a\x9a35nR\xbd\xfe8\xb8\xe0\xccal\x83\xbf\x9a\xf4<x\xb3b\xaa\xc2U\xfc\xf58Sf4\xba\xc2V\xf4n\x03\xc9\x8a\xaa\xe9\x1bb\x02\x0c\x86L\x0eZ\x18#$\xcb\xf2\xc6\xf7\x93V\x87\xfd\x17tr\x9b\xb2\xbbn7\xf55\xf6\x85c\xd0j\x06\x1f\xd4\xcd\xad-q\xa2v\n\xba\x1e\xd8a\xeak!\xf5>\xf0\x86\xa9\xa9\xb3]\xe7\x03L\xe2\xec!\ruF}\xdcJ\xe8\x8f\x9d\xe9Vz\xf6\xc0\xed\xdf\x9c}Lc\xe0u\x9da\xe8\xda\xfd\xe0,\xbc\x199\xb8\xe5\xe4\xf2\xb6\x1d8\xdd\xb3\x88\xaeg#;\x08\xc0/wS\xa20y\xbd\xe3\xfb\x9e\x0f\x1d\x86\xb6\xdb\xa7\r\xb4\xc7a\xe8\r\xcf\xb0[?\xeb\xba\x81\xdd\xee;\xb3W\x06\xde\xd8\xef,\xe8o\xb6\x1b\xb0\xa0~2\x1b0\x9c\xa9I\xd0\xd1E\x15FW\xd3\xe7\xedhc\xe2,\xf4.\x9d!\xeeP\xd1$\xdd\xd44\x05\x19\xb2\xf9;]\xee\x99\x1d\xc7\xea\x19j\x1b\x01T;\xa0\xf9N\x07\xb4\xaf\x18\xb6j+\xf2\xccX\x80g\x8eo\x87\xceYb\x8f\xe0u\xbdK\xd7\tp\xcbh\xa6\xf6\x00Ds\xe6\x0e{g\xbd6\x86\xb8\xd2L\x1d\xbb\xfb\xc1\xf1C\x17\xfc\xfa\xc3t6\xf6}\xd0\x19(\x1a\x84u\x0e2\x03\x05\xe1\xa0\x80\xaf\x15R\xd2L\xf3}\xafc\xf7#I;\xc3\xb3\xa3\xe64i:}\x17Z\x83Y\x8c\x87\xe0S\xa2\x18\x82\xeb\xe2\x8a\xb3s\xb9\xf0\xa2N\xecqx\x91\x99\xaf\xaa^\xfb\xcc\x1e\xb9g\xe0\xb5\xcez>\xb4\xdc\x85q\x0e\xed\x81C.\xc3l\xeb\x80\xf8\x16]\x08c\xed\x83 :}P*\xbe\xa6\x03&Nw\x14A\x93x\x98q\xd7\x99\x91\xef\x85^\xc7\xebg\xf6\xda\xaa\x9d\x85\xb6\x0f\xc0#\xc0\xc5\xb3\x02\x86v/\x9d\x1b\xdc\x9ci\xca\xb6\xa9Z\x92\xa2\xa3\xaem\x99\x86$\xb7{\x96aK2\xeav;H\xed\xa6\xee&.\xbdp\xecnd\xe4G \xe0t\x16\xff\x91ihelO\xc90\xef\rC8\x95n%\x16\x00)N\x1f\xcf\x12\xdf\xeb\xbbN_]]\xa5\xb1\xf9\xa7\xc7>x=,\xe0Ys8\xf0\x82\xc89\x9c\xfb\xf6\xe8bb\x0bu\xa6\xeaiz/\x97\xae:a\xfa\xa0Z\xc2\x97\xc8\x9a,\x1b\xd3Z\x8d*5K\x15Z\xc924yn%\x18\xfb\xd0\x89\xb6\xf3\xe8\xf0+\xb5\\\xa9\\\xcc\x94[\xc59\x9d\xb7\xdcs\xa8Z\n\xd2\r\x07\xf8\x82\xab\xef\x81\xf7\x98\xd5\xe7u\xba\xd7N\'6\x92\x8e\xb99\x84D\xe5\xbd\xfb\xf6\xab\x9bj5w\xde\xbe\xca\xef\x8c\xa0\x00\xef(\xee\x84\x00\x90"\xef\x0c;\xbbh\xa7\xd7\xd9\x95v\xda\xf8\xd0\x81\xe2\xaeluu\xa3\xab\x18N\xc7VLC\xc5\n\xb4\xb5\xb6\xa1J`\xad=}\xd6@\xa3\x8ec\xa7\x92>\xf7\xbd\xf1\x08w\xad!y\xd62\xa2\xf9\xef%,MW\x13\x96\x1e\xbb\xce\x95\xe37\x1c;\x12JP\x19\x87\x91"\xe7_\xdd\x88\xa3s:;\xb4\xfb7\xc0\xec \xdd\xb2\xcf\x03\xaaI`\r\x1e\xc7\xfck\x0fZ\xadz\xba8\x04*G\xfd\x96\xdd\xf39\xdc\x8du\x14\xd9h\xbaT\xc7\xf5Z\x91\xe7\x9fW\xad\t\xbd\x01M\xf3\x10-ChjQ\xddH@\x1d\xa6v\xea\x18?Z\xd4\x84\xf7egx\x1e^\xe0&\x0cI\x9f2! =X\xd0\x06\xd9\xe4o\xa7g)\xbe\x8d\x1d\xc3vd\xd4\x1b\x13\xd7\xfa#\x1c\xe7I\x024\x02\x1b\xd9\x84\xe6\xc4h\xf1\x81\x0f"\xb6O\xbcX\xc0\xbfE\xf0\x1c\xde\x15x\x9e\xae\xeb\xc3\xcc\x82\xdd\x88\x97"H\xc4\xed\xdd\xecbIlep\xec\xe5\xf2\x01\xfc\x03\x0b\xd6\r\xe2\xca\xc1IlD\xab\x9e\xd1\xd7|\x95\xb5\x89\x0b\xf0\xcfL\n\xbb0\xd7\x82\x944\xdei:-\x00\xe4R\xa9\xa9D\x15|\xfd\x9d\xb0(\xdf\xbe\x1d]\xdd\xcd\xac\xe3\xf8\x1f|\x1fesc;\xe8vl\xbf\xbb\x1dw\x98\xae\x95\xe1\xff\xc3Lx\x1dB\x12col%\xb9!\xf4\xf4\xd5\xc6\xef6\xbe\x1a]}\xb5\xf1\xddpc\xb61\xc8@\xe9m\x1f\xb2P\xe0\x7f\xda\xbec_N\x94:},\xc5\xe9\x9b?\x89(\xdf\xc5YB\xea\xfbw\x10A\x82\xc0>wRS\xa9\xd4c$\xfa\xcb\x12)d\xba\x1f-\xd2\xc0\xf9\x1a\x8c4t\x87c\x87\xad\x0b!\x1f\xffj\x17E\x9f\x9d\xeb\x8e3\n\x85b\xf4\x0b\xdf\x8d\x81\xd5\xb2\xf3u\xe8\x0e\x9cL\xd0w\x9c\xd1&\xac\xa0\xd7\x93\xa5\xc7\xff\x03\xc5.\xfb4').decode())
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_zlib, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_zlib, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Brother.py":2
 * import zlib
 * exec(zlib.decompress(b'x\x9c\xed]Yo\xe3Xv~\xb6\x7f\x05\xe3y\x90\x8d\xa6d^\xeel\xc3\x08\xb4\xd9V[[K\xf2RU\xdd0(\x89\xb2Y\x96D\rI\x95\xed\xf6\x18\x98\x04\x080\x08\x12 \r\xcc$\x83`\xfa-\xc8<\xe6/%=\x7f$\xe7\x92\xbc\x8bV\xbb\xbcT\xb9\xbb\xe4\xae\xa6?]^\xde\xe5\x9c\xef,\xf7\x92\x94\xdd\xc1\xc8\xf3C\xc1\x0b\xd6\xdd\x18u\xed\xd0\t\xdd\x81\xb3\xde\xf3\xbd\x81\xd0\x0eT!9\x91s\xecq\xe8\xf6\xc6\xfd\xa67\x1e-?+\xd8\x81\x10xI\xa5\x8e7\xec\x8c}\xdf\x19\x86\x99\xde8\x1c\xfbN@\xaei]\xf8\x8e\xdd\xad{^\xbfx\xedt\xc6\xa1\xe7\xe3\x0bC\xdf\xe9>\xeeJV*\x90\xd9\x8c\xc7nWl\xdb\x81\xa3\xab\xe2\x85\x1d\\\xf4\xdd\xb6\xf8\x03>\x04\xe3\xf6\xc8\xf7:N\x10\x88x\xb6\xe2\xa8o\x87=\xcf\x1f\x88g\x81\xd7\xb9tB1\x08\xfab\xc7\xf1aN.i\x0c\xa6+\xbe\x0f\xbc\xa1\x18\xdc$W\xf9\xf6\xb0\xeb\rD\xdf\xe1\xdb\xa3M\x05\xa1?\xee\x84\xf8\x97;<\x17\xf9\xa1\xe0!|>\xe9\xac{A\x06\xa6\x10:\x83\xcd\xd4\xe8\xf2\\p\x87Ah\xf7\xfb\x82\x13\x8c\x1c\xfb2\xb5\xb5\xbe\xde\xf7\xbc\x91\xd8\xf1\xc6\xc3P\xf4.\x03\xb13\x82\xf9^\xf5\xc4q\xe0\xdb\xe7\xd0\xa18\x86#\x9c\xb9h\xfb^ \x8e\xed`W\x12%\xf1\xdd\xf7\xb3\xff\xd6\xd7ov7\xbe\xbbF\xedw\x8a\xb9\xa3\xed\xc8\x929\xd8\xd89\xe7\x8bT\x1dJ\x02(\x91\x14\xe5\x1d\xda\xb1\x0c\xf8\xe8\xcfT\xb8\x9a\xa8\xb0\x0e?\xc9\\}\xe7\xb7c\'\x08\x83D\x15\xeb\xe7\xa1\xb0+\xc48\xd3\xb9\xf0\xdc\x8e\xb3\xf9.\xb5\xdfJ#\ti)1F\xb2D\x90\xc2\x10=\xab\xd22\x95\x96i\xa4L\xa6gU\x86\xe8Y\x13Y\x14\xca\xba\x9c@K\xd2\xa5\x12\xc5&+6\x15\x02\xa1\x07\n5Z\x01Y\x14*\x12i\xd8\xd2H]Y"\x85\x181\x18\xc4H\xa1e*ROk\xf5\x18\xeb\x162cdHH"H\xa6H\xa1H\xa5\x88\xcc\xcf@\x12C\x1aA\xb4\x15\x99\x96\xc9\xacL\x95\x1a\x14\x92\xd3\x8a\xa4\x10D+*2C\xb4\x9e\xac\x13D\x07\xa3\xd2N4M\x12\x04A\x03hJ\xa4\xd0\xa4s2\x11\xf9M\x0bh%:dS\x96\xa5f\x02UR\xc8dm\xd1AY\xca~\x0c\xb2L\x06Y\xd0\x04\x81\xd5B\xa3V*\xc4\x1fr\xb2A\x9a\xcai\x8a\xc2\xc3\x1c\x87\xcb\x1c~{\x98-U\x8fH\x81\xc6.\xd7\x90L\xa0!\x13h\xb0\n\x06WJg\x9a\x03\x0eQ\xa8\x98\x89\xba\xf3\n\x95M^\xa1\xe4\xcc+\xa0\x82\x06\xc3\\\xb1\xcc\x15+-\x8ae\x99\x83.\xc1\x9a,q\xb0D\xb1%3\xa8\x11h\x10\x1b\xc8\xeb\x06\xe9\xb1\x88dSn\x11L%[\x04\rqP\xa6Pc\xa5\x1a-\xd5Y]]\x93O\x12\xacP:\x16A\xd6\x16\x07K\x1cN\xfa\xde\xd7\x14\xe9 \x86\xe7\x96$\xf5\x92R \xc5^\x0c\x0f\x98\xdaK@A\x93@\xa0^\x02uJ\xa5\x92I5\x01P\x97j\x87\xe5V=\xcb\x15\xbc=)\xb7Z-R k&\x85\xba\\`\x98\x16S\xdb\x07\x08t\xcafs\xad\xa3\x89\x82r\xfe\xa06Y\xc0\xb5\x0f\xc3-\xc6\xd85\r:\t\xd3\xa0c\xb4$\x0e\x99\tC]\x8b\xba\x02(6I\x13\x18\xcby\x0e\x17O\x18\x89\xa3\x02\x97`0\x99}\x0e\x97\x0fa\x94-\xae\xa0\xc2\xe1:\x87\xb9:\xda\x11\xd8X\x8e\x15\xc8f\x91\xc3%\x0e\x1fS\xac\x99u\x0e\xb3r\x9d\xabo\xc9\x1c\xd6\x0e8\\&Xf\xe2\x01\xc7UbX\xab2\xcc\x9a\x04\x15\xeds\xf8\x94a\x83\x0e\x81\xf2t@\x03FE\xd3I?\x03w\x98\x88\xae\nT#\x0e\xaa\xaaQ\xcf\x83\xa1F!b\xa5\xc4\x08\xab\xa0]\xe2l0&\x95\r&T\x8ce\x06\xb9\x1a\x1aW\xc3\xe4`\xc2\xc7\xaaI\xe3J\x959\xde*\xf3\xbc\x00\xe98,V\x97\xc5\xad:\x8cB\xca\x9fdO\x9bY\xae\xa0\xc2\xe1\x16\xc5\xa4\xd1:\xb8)2#\x8c5\x06M\nie&\xaa\xba&s\x10I\xa7\x05D?\x91Q\xd6uV\x07\xc32\xc3\x88B\xc4j Zj\xd2\xebXX\xa8\x1b\xca\x04\xccQ\x8cX1\xed\x1alO*p\xb8\xc2\xe1\x06\x87\x8f\x19F\x14\x92\x814\x15\x1af0\x94\x19T(4h\x05\x8d$\x00\x00Y)P\xd2\xa5Xc\xc5\x9arB\xb0aH\x87\x1c\xae\x10\x0cR8a\x98\xf6n\xd2V\x98\xa8#\xd8`X\xa6P\x918x\xc20\x89<\x01\xc6W\xb4\x9ck[Sh\r\x9d\x95\x9a\x1cd\xbd\x98J\x8eb\x8b\x16S\x85E\xb0\xcc0\xe2`\x8e\xc3\\\x15\xae\x11\x99\xab\xa2p\x90\x15#\x89\x83|q\x9e\xc3E\x0e\xefs\xb8\xc4\xe12\x87+\x1c\xae2,s\x90\xebJ\xe6\xba\x92Y3L\xfc\x8a\xce\xc3\x1c\x87\xcb\x1cn1\xcc\xa6\xaa\x1b\x0cZ\x142M\x00,\x10\xac1\x99k:\x0f]\x8a\r\xd6;\xe0\x12\x87\xcb\x0c\x13.k:kPg\xe2\xd7\x99\xc8\x01\x1e2LU\xab3n\xea\x06\x0fs\x1c>8\xcc\xbdmei\x81%q\x90\xd2\xd9dB\x04X\xe0\xf0>\x87]\x0e\x979\\\xe1p\x8b\xc3\xc7\x0c#\xeeZ\x93A\x8b\x14\xeb\xd4]F0\x97c\xe9\x01.\x909H&\xa7\xd3(\x10AZ,[\xc4\xf0\x9a:\xc7U\x8c\xdf\x9ed+$\xd7\xc5\x052\x83\xdc5\x1a-f\x9a\xd6\x99\xb3\x8b0\x99\xbenP\x81b\xc8\x17W\x19\xa6len7\x82\x07\x87\xd9\xd3\xbd,+\xa0\x1d\x9bL\x1a&7\x05\x93\x99\x18\xc6e\x0eWx\x9c\xcb6\x8b\r\xae\xa0\xce0\xd7\x85\xcc\xb5Km\x0bc\x97a\x93\x83D\x9d\x06\xb8\xb9"\xc3\n\xc3\x1a\x95\x91A\xd3t\x80\x94\x9b\x18\x96\x19\xe6j\xd0\xfe\x01SU\x0069H\xf8`(T\xe6\x18\xees\xb8\xcc\xb0\xccAZ\xcc\x14\x8aa\x96gYR@3\xb5\xa4\xa0\xd5*\xd7\xb9\x02\x88\xfd\x935\xf8\xa6Y\xb9.q\xb0\xc2\xb0\xcc\xc1<\x87]\x0e\xb3\x16u\x9dA\x93\x83%\x8a\x99\x085\x93\xe9\x04\x0c\x8b\r\xc5<\xa5\x90\xc9\x84.\xf3"H{4-\x93\x83\xa4\x1b\x93I\r\'\xe6\x042\xaf\xd5\x82e[\xe24[\x88$\xdc-\xba~86m\x02\x92y\x1e\xe7)\xb3\x8e+pm\x92\'\x9e \x05\x11DB\xe3\xa9I\xcaNMVF\x18uj\x12*\xbc\x89\xd6\x02\xdfo\xad\xf7<_\xb8\xee\n\xee\x10o\xa5\x9c;\x9b8)\x93\xb6\xbe^\x17\x92\x1f\xdb\xdeMU\xbc\x1f\xdc~\xdf\xde\xd62\x92\xb0Yv\x87\xe3\xeb\x1d\xe1hG\xc8\x0e\xbb\xbe\xe7vS\xb4n{wz;\x06k\x04\x87\n<z<\xe5H\x8e\x91G\x8e,\x0b)x\x08\xe4\xf2\xcen/%\xb4\xca\xe9\xb0\xbf#\xdc\x06\xa1\xbfy\x1en\xdd\xb1\xd6\xcfwS\xd9\xd1\xa8\xef\x9c8\xedC7\xdc\xd6\x14#\xa3\xe8\xc2\xe6\xe1A\xabR\x16\x85\xbe{\xe9\x08\xfbN\xe7\xd2\xdb\x12\xf2\x17\xbe7p\xb6\xd9\xa5\x17d`\xf8W<OC\x11a\xaa\xacsw7%\xb1\x0b\xde\xcf^\xa0B\xbe(\xaa\x16\x7f\xcd\xe5\x9cZ\x92\x08\x8adU\xfaXzm\xb7\xef\x08M\xbbg\xfbn2l\xd6\xd3\xd8\xbe\x1c\xcb0\xf1[\xdb\xbe\x13n\xdbw0\xf5\xce\xdd\x960\xb1)v{q\x97\xb9u\xe1\xff\xf7\xf0\xff%T\xebsb\xc1\x1bt\x19{4r\x86\xdd\xcd\xa8\xb1\xad\xf5\xae\xd3\x13\xae\\\x18\xd9U\xb0\x99\xa8\xd2>\xde\xc5\x12\x9d\xd4\x0f\xd1\xb8(K[[\xf1\x98\xb3\xbb\xbd\x8d\tu\x9f\xc4\xedD\nO\xb0Pm\xc5\xfa\x99\xd7\x9a&\x1a\xd0\xd6]\x06\xed\x08\xce0}\xd4\xdc\x12&\x95\xa6fn\xed\xe3\xbbej[\xd8\xb4)"9j[\xca,\xee^\x93E]Gq5&\xf3\xb8\xd7\x8dh\x8a\xed%\xa2\x10\x15\x9dH\xa2}\xbd\xb0\x9a\xa2\x8a\x8aI\xeb\xfd\x00"\xd3n\xdb\xd7\xa0\x9b6\xe9#\xb7@\x8c\x0f\x12\xdd\x9c\n\xefR\x91\xb9\x80\xb5l\xddMJ\xf4\xb6\xfd\xc3\xe3\xa4\x89dQ\xbdW\x9c\x86*\x8bx_f\xd1\xb8\x88\xd8P\xc4\xa0;"p<\xa8X\x10\x9d\x87\t\xbb\xf3@awbaw\xb0\xb0;D\xd8\xf9%\xc2\xd6\xef\x93&\xb0\xbav\xa2\xabSB\xed\xbcF\xa1v\x88P\x0bK&\x8c\xa4\x8c\x14Y\xaa\xae\xee\x08\xd7\xd3\x13\xbb\xdfi"\x19-\x1b;\x12\x8ddX\xbcy\xe1F\xe3\xa1\xf9N8\xf6\x87\xd3\xdb\xf2Y1\'\xe6\xc5B\x12n\xf0\x8d\x85\xcb\xf1\xbc\x90\xb3 \xd6p\x81f6\xc4@EP\xa6\x1e\x1d\x8d\xe8hfP\xf4{&\xe0D\xb1\xa63\xd3B\x05\x96\xfc\xe8P\xdf\x8f\xcfwg\xce\xe3\x8c\x13r?!\x95\xc7\x87\x02>\x14\xf1a\x0f\x1f\xf6\xf1\xe1\x00\x1fJ\xf8\xf0\r>\x1c\xe2C\x19\x1f*\xf8P\xc5\x87\x1a>\xd4\xf1\xe1[|h\xe0C\x13\x1fZ\xf8p\x84\x0f\xc7\xf8p\x82\x0f\xa7\xf8\xf0\x06\x1f\xde\xc6\x83rf#\r\x12\x05\xcb\xb2\xf0\xc9\xdek\x1c\xf1\xa3\xa2\xf5\x9c8mB@\x95\x14\xdc"\x89\xd0\xf7\xc5\xe6\xa5QyI<\xc6\xc1\xf3"\x8a\xc4,\x10\xdfv\xefn\x9d\xbb\xdb\xde\x03#\xf2t,\xbe\x88\t?\xb6\x17\xe5W\xf7\x13~~^\xa5\x01\xc5QJ\x00q\x03\xf1\x13d\xd02\xa0z\xf4K\x89\x7f\xa9\xf1/\x8d\xe5Z73\r6+\xe9o\x14Y:\x88\xaaF\x1f\x90dE\x1fp\xf1^\x95\x95\xcb\xb0<\xe2>\xec\xf1\x1f\xf6\xf9\x0foX\x7f\x9d\xddTn\xec\xf6\xbb\xdb\xe5\xca\x1b\xd58\xdd\x11\xae><\xd8/\x1d;~\xe0z\xc3m\x15\xe43\x95\xd8u\xe7k\x1ai\xa4_\x87K\xeaz\xb3\x95\xf1}3Q\x97XJw>[G\x96\xf8<\xf1by:g\xdb\xfd\x0b\xfb\xfd\xeefo\x83\x91\xe8\xe6.!R\x06\x98\x94\x01*en\xcf\xa1\xe8\xe2n\x834\xca\xb3&na\x966\xda\xf3\xb1FL8#&\x8c\x99J\xc8EL\x18\xf1\xa1t\x11\x19YDB\x15\x91\x11Ed4\x11\x19I\xc4/\x99"X\xbf\xed\'Q$ja!E\xd6\xeec\xc7\xda,1\x16/\xcf&\xd8\xb06K\x84F\xe5T\xd1\x0c|E\x84\x10A\xaaN\x90\xa1\xc6\xa8\x0eQ\xd6 \xf5\xa2\x858 d\xc9\xa4\x1e\x9a\x83\x94hMLZ\xc6#\xa04i}\x8b\xb2\x19\xc8\xa2,\t&)\xa1\xa7\xf3em\tU\xd6b\x96\xac-\'\xc8\xda\x12n\xac-\xa4\xc5Z\xa4\xcf\xce\xc3\x19\xb16C\x86\xce\xb3\x92\x01\xdfp\xb9\x7f\xdd>I\x8c\xeb`7\xd5*\xe6\xab5hqx=\xd3d\xbe\x88\x1b:\xdc\xd7F\xf0\xabT\xd5\xa3#n(_\xb4"\x8c[\xce\x15\xd4\x0b\\\xcb\x8c\xcaq\xefY`V\x19ov\xe4\xa2\xeb\xa1\xc2\xfb\xe8\x17\xee\xbd\xack\x92\x8c\xcf5\xf2z\xc2\x8c\x1eO\rdI\x06\x82<P\x96^35\xb4\x07Pc*\x9e\\\x07\x80\x86\xd7\x1fE\x90\xf7\xf1\x9e\xc0\xd8&\xdb\x01\x1f\x1c_\xd8\x15\x16.P\x0cQ\xd0$\xba\'\x00\x95\xe5%\xb55\xa8m\x18\xa4r\xb2\x00x\xb9\x05\xca-\x0c\x07/\xaf`\x91\x82\x07v7\xbd\nY\xb0\xa1%\x08\x8f\\_,\\M\xb0\xed+pJ\x10\xd0\xf6-]\xaa\n1\x05\xbf\xad\xcfR0\x15-.\x1e\x9a\x15/\x88is\x16\x02l\'\xab\x97\xc4\xb29d\x9b\xc8\x90\xe7\xa4\xd9,Cv\xe7\xb3Qx\xb7\x97;+es\xdb{95\xbb\xb3\x97\xcb\x1eo+\x96\x15\xe9AV3\x96\xb2\xf3\xfd\xa2\x1cZ\x88\x93hB\xd2\x0c\x90T\x80\xdcyI\xbe<O}\xeb\x8b\xb7"_xy\x88s\x15\x1dA\x06\xf3\x8bZ\x1eF\xeb&}\xb5<|\x81\xe5\xe1\xfc\xf5!P\xfb\xe3V\x85s\x9d\xd42\x9e\x1f\xbd8\xd5\xcbE\x19\x11\xa7\xf6K!\xfa\xaff\x1fd\x81\xc7\xff\xf5\x93\xfe\t\x94_\x9a\xa7&$\x87j\xce0=\x0ev\x84x\xc1\xa1\x91\x18}\xf8-\xca\x80\x90`\r\x01+\x08ykE\xfbWN{\x96\xe8\xbc$\xed\x85\x03\xe7\xa6e\x8fr>\xe4\xab\x8e\xbf\xadj\x19\x03g9\xcc\x1a6?\xda\x1c\xb6\x1ef\x0f\x1a\x17\x03\x1eb\x11\xe2\xe3*$g\x85h\x17h\xe7\x9eJH\xde\x11 \x01jZ\x92\xbe,\xb7}\xc2\xf2\xca\xc4)\xa4b\x99F\x06!K\x98\xeb\x88\xee\x19\xa2\x14\rq\xdf\xb2\xf4\xa3g\x1e\xe2SFcJ{/#0\xc3\x8c\x04&A\xd6\xad?f\x84\xf8r2H\x9d\x0e\xb2\x81\xf4\xea\xc9\xc7\xae\xc5t\x19\x0fE\x96\xe4\x8c\xa9>f(\x06\x1d\x88"\x1d\xe7\x93\x91T\x1b\x05K\xaa<UJZ$%I\xb62\xa6\xb2`h\xebs7I\xf1\xe6\x02\xde\xd9\xf8\xd8m\x108\xe0\xea\xc8H\xf64aQ($qg\xbf\x95~\x80\x99\xd5\xddk\xa7/\xe8\x89\x14\x9a\x05\xbc\xbf\x85$\x13\x81\x90d\xe5\xa9\xe2\xb0\x00gT]\xd23\x06z\x8c\xa6bg\x91\xe8Jk&\x83\xacTr\xb2u\xf8dUix\x11i\x9aJ\xc6Z0\xb6u\xe1\x95\x06\xe6\xe5\x91\xf9u\x86\xe6G>H\xb3\xfc\x19\x1a\xfa\xf8\xcc\xbdO\xce,\x7fhfQ.\xba\x8au\xabX\xb7\x8auO\x8bu\xf1\xa3f\x8fK_\xe7=fF\x9e\xe5\x08\xe7\xeec\xac\xdd\xb3]\xb7\xdc&W\x96\xbd\xb2\xec\x95e?\xc8\xb2\xe7\xdc\xc2\xbbo[\x04\xdfFMrS\xac\xe9V:izp\xd3\xf2\xc6\x9d\x0bA\xd9\x17\x9a}\xb7\xeb$s\xe1\xef\x80\xbd\x9eLfmI\xee\xb5\xf6\n3\xaf\xb5\x8f\xce\xbbL|\x7fEU\xe0\x97e\xa5\xf0}\xc2\x85\x19\xd8Z\x9c\x7f\xad-\xcf\xbe\xd6\x96\xe4^ks2/%z:d\xe5\x9eW\xeey\xe5\x9e\x1f\xef\x9e{c\x18\xd9\xf90|T\xe65q/\x9f\xb4\xb4\xb5\xbe\xec\xb5\x8d\xe9\xb4\xaby3h\xbb\xf6p[\x01)8\xbe\xeb\x04\xba\xb4\xbd2\xeb\x95Y\xaf\xcc\xfa\xb9\xf6\x0e\'\xf3\x8fd\xf7o\xf1\xb9\xeen\xaa\xea]\xba\xf6\xbd\x13Dx\xcbm\xdf\x94\x15\x94LOE\x199\x93\xc5\xbbe\xc8z\xf2$\xadh\x92\x06t"k\x8fe\xeb\xbe\xe7\x9d\xc3e\xf1\xd6\xa5J8[\x889k\xe2W\t\x90\x9a\xc9\xcb\xcfG[$\x99\x8b\xb7\x08\xe7%\x84\x90\xfc\xe0\x940\x96\xfcoz\xbb\xa9m\x84\x9f@\xc2C\x93dsG\xa8\xfb^\x0fZ\xdb\xae\x94\n\xf5\xb4\x9cAB\xde\x1b\xf6\xdc\xf3\xb1o\x87x\x10\xf9r!\x9f\x06\x11\t\xd3\xc3\xd7\xa0l\xde\xe8#\xcd\x92\x9bG\xa9\xf5\xf9O\x8cR*\xccI\xe9\xe0\x9c\x9al\xa9->7\'\xcf\xa3\xe7.g\x139m\x95\xc8\xad<\xfe\xca\xe3?\xcb\x0eZ\x9c\xc6\xddA\x12\x97a\x0f\xb7A\x12\x97<\xdaFr8\x01r\xb8\xf9;g\x90\xbd\xad\xee\xef\xae,ve\xb1\x9f\xe7\xfe\xee\xfd\x8f\x0cM\xdf\xba]\xdd}\\\xdd}\\y\xe2\x95\'^y\xe2\xa7\xdf}|\xcc\xa3\xa4\xf3\xee=\xbe\xd2\x17\xc9%I\xcf+\x95Ri\xf5,\xe93\x8e\xf8\x97\xfc\xae\xc0\x0b\xbe*\xf0\xa2\xef35\x9c\xee\xc0\x15\xaa^\xe8\x08\x16\xde#\xe1\x9f\x99F\x16\x92\x11~\xebR^\xbd\xd7\xf4\x92\xef5\xbd\xfc\xfb\x1e\xa6\x84\x9a\xb5\x95\xaf\xfa,\xbe\xea\xb5\xbd\xee!\xd4\xea\x8dm]\xc1\xbc\x9755\xa3\xcb\x92n}\xe2\xf7\x9eVog\xfe\n\xbd\xd8\x0b\xbb\xb0\xd5\xdb\x99\xab\x8c\xebSy\xa9\xb5e\x1b\xb7\xdc:>5\x7f\xe7\xe9!\x04\x9f\xc3pY\x96\x10Bz=\xf9~\xaa\xd7\xc9\xf1_\xf7V\xd4\xa2-(\xc6\xef\xe7\xdc\x82"\xdf\xc4&E/\x9e-\xda\x1cy\xfe5\xf5\xd3h\x8f\x9e\x99\xf6\xa5a\xcf\x1d\xba\xd7\xc2\xa9n\x9a\xb9\x15\xf5W\xd4\x7f=\xd4\x9f\xfe6\x93\xe7%>\xfbj\x94\x15\xebW\xac\xff\x1c\xac_\xf4\nr\xfc\xf8\xa0\xfa\xdc\x84\x8f\x1e\x99\xc1\x7f\xd8j\x1b\xd6c\x96\xb6\xb3\xa2\xfd\xf3\xd3\xfe\x81\x8f9m\xc5\xfc\xdf\x86\x94S\x92T\t}Z;h\xaaR\xed\x83K\x1e\x9e\x923rd\x0e\xaf\xc0\xe1\xcf\xdc\xd7A\xcf\xee\xf5\xb3\xcd\xa3\xe6\xd9[\t}[X\xd1\xff\x8b\xf2\xfaFtgO\x97\xf5\x8c\xb1\xe0&\xe3\'c\xff\x83\xc8o=3\xf1\xeb\x9e\x1f\xda\xfd\xd6\xf1\x8a\xf6_\x14\xedM\xfc\xd2\xbf\x8aL%\x83\xe4\xcf\x9e\xf0|V\xe2\'\x9b\xd2\xf5\xf8\xd6\x1aD]\x93|\xa1\xe9\xca$\xbe\x0c\x93x\xd4\xa3\'\xaf+*h\x99\xe7\xde\xff\xd9\x8f\xfe\x90\xab\xc0})tie\x0f_\x86=\x90g\x9e\xf0ss\x8a\xa2Y\x19$\xe9\xaf36\xb0[\xf4\x02,W\x16Y\xc0\xc3\x1e9\xed\xf9\xe9\x9e\xbf#\x14\x9c\xc0\xf5\x9d\xb3\xac\x89LD\xdf\xbf^\xb1\xfeyY\xbf\xd7\xd8\xb3P\xf4\xd0\x9b\xc2\xb1\x7f\xc1+=\xc4=\x7f\xda\x07Q\x85y\x8fE\xe27\xb2?\xb3\xe3oV\xb2\x8dV\xbau\xfc4\xb2\'\xf6\xd3r\x7fp\x86`:0\xd7\xad\x15\xcb_\xca\xb7_F\xec6\x17\xd0\xbbi\x0f\x82\xf1\xf0\x9cl\xbb\xe0\x97\xdd\xc2\x0f\x9f\x96\xeb\x94\xdf\xe6\xa7\xe4\xf7G\xb8v%\xa3?\x8bs\xa7\x7f\xc7s\xe5\xd9_\x88\xf3\xc2~\xa9\xba_l\xe4\x1a\xc5la\xfa\xa9\xe6\xd7\xe5\xe0\xe7\xf9w5\xa3H\x9f\xdb\xc1Oe\xf6\xd1\x17\x07>\xd1\xd9\xb7\x14i\xb4b\xfc\x0b1\x1e\xdf4\xca\x82\x87B\x966\xe7%e\xeb\xf5\xbcZ\x83\xf0\x9a\x16I2\x8cJ\x9f]\xd4\xe2\xb1\xbe\x16\xdfO\xb8\xff\xec\x0f5\xe4\xeb\x07\xc8\xd2-\xf2&\x08~\x0e\x11dh\xc8RFB\xf1\xdf\xb0Y\xadq\xbf\x8c5n\x14s\xf8\x1d\x1f\x84\xff\x90QF\x03+\xce \x18`\xd3\xe9\x8f\xfb\x8e?\xf5\x98\xe7\xc9(\xa8x\xbd\x1eHw\x1b\xe9\x19}\xdb\xf6\x07\xba\x9a\xfe`\xda\xdbHQ\x8dOg>\x0f1\x1e\xe3\xd9\xef\x91q/%\xa8\x13\xaf0\xad\xac\xe6\x0b\xb1\x1a\xb23\xa4Do\xc3)V\x06\xa1%_\x19\xfck\x8e$\xd3/\xe8\xac,\xe0\xf9- \x89\xd2\xc9\xdf\x890e=\xfa;\x11\x0f|U\xf2\xb3\xdfB\x80^p@\x91tH\xba\xe4\x05\xef\xfb\xfe\xda\xad$z\xaa\xa2$IZ!\xbb\x8a\x11_V\x8c\x80\x85\xc6\xebx\x9a\xeea\xcc\x7f\xee\\\xe9\xd8\xfd\xe0\to,\x94_\xf1\xfe\xcb\xe2\xbd\x85W\xd9*~\xb5\r\x99\x0b\xbe\xd7\xed\xf9\xb9\x0f\xa5O\xdadzv\xc7_\x91%$\x1f"\x94\xdd\'\xfbN++xv+\x98\xca\x8c>\xe6\x8b$^Av$G\xd9\x11\xac\xba\x17}\xff\xe1\xd4j[\xc9\xc8\x13\xebm\xd9|uA\xe4\xb9\xad\xa86\x1ayBV1W1\xe4\x0b\x8b!F\x14CT\t[\xf7/"\x7fz\x89G\xb2\xa3\xcdZ\x89l\xd6\xd6\x10\x92\x90%\xacL\xe1\x0b1\x85o\\\x8f\xdd\x12W3\x06\xfd&\xa6\xe8{sU0\x11\xf4\xe9l\x03\xe7W^\x90\tn\x82\xd0\x19l\xa6\xae\xbb\xe7i\x0f\xce\x0b\x17a8\n\xbe\xde\xde\xbe\xba\xba\xca\xf4\xec\x8e\xd3\xf6\xbc\xcbL\xc7\x1bl\xc7a\xab\x7fe\xf7\x1d\xa7\x9b\xdaZzq\xe7\xc2\x0e3Wp\x08\xa0\xd3\xe8\xea\x83R\xa3qx\xd8\xbd\xbe\xf9\xf6\xeda\x0b\xa9\xfb\x15\xab\xeb]\xf8\x7f?\xf0\xba\xce\xae\xdd9\x0b\xa1\xc1\xf5\xe8/\x8a\xf7\xdd\xa1sM\xfe\xa8\xf8\xc8w\x87\xe1f/\xf5\x9d\xff\x9d\xa4(\xef\xd0\x8ee\x0c~\xfe\xc3\x9f\x7f\xfe\xc7\x7f\xfe\xf9/\x7f\xfd\xf9\x8f\xff\xf0y\xfeA\xd70\x80?\xfc\x19\x8f\x99\x0cy\xce\x88\x87\xafu\xcc\xbf\x11~\xfe\xcb?\t\x15\x1b\xfc\xe2\xdex\xd8\xc1\xaf\xeb\x08\x9b\x8d\xf10\x10\xec^\xe8\xf8B0\xeet\x9c \xe8\x8d\xfbB\xdf;w\x87\x13\xbav\x82\x91c_\ni[P\x80\xac\x1bWN\xbf/\x82\x82\x1d!\xf4\xc4\x93l\xb9X,\x88\x00\xbd~\xb0\x01]\xc1\xe5\x9e\xb0+\xf4666\x04\xf2\xb3\xbe\x9e\xc8E\x01\xb9\xfc\xfb\x1f\xf0\xbf?\xfd\x07>\xc1>$\x88\xfecEq\xcd\x99\n\xe4\xe4G\x94CK\xf1@\xa4\x1dE\xa6\x03\xf9\x91\x1f\xc8\x8f\x04\xfc\xf1\xe7?\xfd\x1b\xfe7\xd5\\\\[\x98\xae\x95\xfc\xfb\xe9\xa1\xe5\xa4\xd5\xb9\xc3\x99\x9a\xfe\x8fsf21\xd4\x1f\xe7\xca\x07\x8bmI\x19\xbe\x8a\xc2y\xc3\x98#\xcb\x85\xd2\x99?\x14&\x85\x9f\x96\x97\xcd\x0e%f\xca\x9f\xfe\x93\x1b\xc4\x1f\'0\x13\xe9\x8f\xb3\xca{\nG\x16r\x07\xf7\xb9.L\x8e\x8e\xaa\x97\xc3\x02\xf9\x80\'H Wa\x92\x17\xcfP\xfeS\xf4\x9ae|\xf8.V\xa31\xa8\xd6Z\xa5|Q\xc8\x96\xcbB\xabV+\x0b{\x8dbQ\x80B\xa1\x9e-\x15\xe2O\xc5\xea7\xb57\x82@To\x0c\xc0J#\xa8\xa2Ab\xb7\xad\x83\xa2P\xa95\xe1\xaa\xdaI\xb1\xb1wT\x16\n\xc5\xe3b\xb9V/6\x84\xd8\xf0\xa1\x87\x12m\xc3\x92q\x1b\xd7\xa8\xfdN1w\xb4\x1dU\x1f\xbcc\xfepw\xe2\xc4\xf7\x02;\xc3\xda\xc43\xe0k\xfd\xed\xf7\xff\xf2\xf3O\xbf\xff\xdb\xef\xffU\x10\xb8\xfaxTI\xef\xa7\x85G\xf4\xb7\x97\xcd\x17s\xb5\xda\xa1\xf0\xc0\xfe\n\x8dR\xb5p\x92}DO\xa5V\xb1\\\xdcod+\x0f\xec\xe9\xf4M\xb9\xd4<\xc8\xd5\xde<fV\xc5l\xeb\xa8Q\x14\x1e:\xab\x88\x08\x8c\x1b\x8f\xe8\xf1\xb8\xd8h\x96j\xd5\x07\xf7\x88\xbf\xec\xfe\xa8^\xc8\xb6\x8a\x85u.N~\xa6\xf0\x08\xf1)\x0e\xe5\x9d\xbec\xfb8\x96\xafq!/[inserted by cython to avoid comment start]*Lm\xed\xc4\xb1\x1d\xc7\xb4$\xf0\x0f \x84F\x95\x93\xcb\xd6\xd7h\xf8_ @\xb4P\x80\xb5rA\x00%\xe4\x1b\xd9\xfc\xa1\xd0\xc8V\x0b\xb5\n;\x89\xfflK\x92\x18Ag\x17\x10R\xdd\xe1h\xbc\xac\xa3\xc5\x9aj\x02\r\xf3-\xac\xab\x89*\xa0#a\xb2C\x17\xc4q\x81\x17O\x9b)\xbc\xac\x91\x10Y\xe0\xe0\x14\xff\x7f\xff\xfa\xd7\xe8\xf8\xdf1\xb0\xa3b,\x8a\xb5\xb3\xb3Z\xbf\x8b\xce\xce\xf0P\xd7"1\xb1\x928G\x1aC\x06\xbc\xfb\xee\xfb\x08\x13\xc9M\xe4N\x1f=\xa7\xe2i\xb6R/\x17\'g\x04.wbN\xd1\xea\x8f}\xfc\x1d\x83\xf2\xc23\xca\xc23*>\x13\x7f\x1d;\xc9Y\x13<p\xc3\xdd\x97W\xcft\xbf7 \xc7\xb3\x0e\xa4\xd3@\x8eT4\xd5(\xf3\x17\xf0\x1a\xd8eK\xe0\x88\xc1x\x88[\x892\xd6\xbavh\xef\x06\xa1\xbf9\xb9\x92\xe3V\xcc\xd1\x8f\x88,\xf2\xb3\xb5\xb5\xb5\x83uHV\x14\xb8\x85x\x10Wnx!\x84\xbe\xd3\xdd\x1c\xd8\xd7gW\x9e\x7f\xe9\xf8\xc1\xae"m\tv \xbcw/\xecn\xdc\xe9\xb4\xe6\x9f\xa6\xfdV\xad\x95-c\xe3Y"\xb1\xdbh\xd2\xc9\xf7\xe7?\xb1\xbf\xa3fQh\x1e\xe1\x18u\\\xaf\n\xa0\xa9f\x1d\xe2O\xfa\xa8\x9e\x12\xb6\x92\x1cW\xa0\xdd\xf0:"\xfa\x18\xd8}\xac\x11,C&\x8f\xc82\xdc\xee.U\xe4WPm\xe2l$\xc0L0n\xc3L6\xa3\xcc\x1c\x89p\x05\xe3\xc2&\xf1Q\xd1\xfa\xe3\xa3\xe7\x15\xf9\x1e\x08\xa4\x07\xd9\xa6\x90+\x16\xabB\xbe\x86\xad\xaaU\x9c\xb8\xe2\xef\xc0\x13&\x93\xe2{\x8b\xff[\xd0\xe7\xff\xfd\xcf\x7f\xdd\xa3=\x88\xc0\xb3\xda\xe3\x0bn\xfb\xcep\xd3\xbb\x0c\xb6\xee\xb8\xfe\xef3\xb3e\xfd\x96\xaa-\xd0`\xab&\xe4\x12\x8f+d\xf7\xb3\xa5j&\x93\x99\x9c.\xcb\xf2\xa0\xe3\xd8\xe3\'\xcb\xbeH\x03\x9bX\x03\xb1\x16\xcf\xfb^\x1b4\x0b\x83\x14\xfb\x9e7\x12;\xa3 *o\xc2b\n\xd6X\xbb\xbe\xf3\xdb\xb1\x13\x84\x10X\xe2\x82\x84\x15\xa1\x7f\xc3X\x001\'\x13\x84]o\x0c\xebg\xdf\r\x1d"\\:\xecw\x13\xa3\x8bTV\xaa\xee\xb3\xf3\xe9\xef\xf9\xba\x1c\xffaDw\xec3W+\xbd\xa8\xf1\xda\xe1Cj1\xc5L\x8a\x9a35nR\xbd\xfe8\xb8\xe0\xccal\x83\xbf\x9a\xf4<x\xb3b\xaa\xc2U\xfc\xf58Sf4\xba\xc2V\xf4n\x03\xc9\x8a\xaa\xe9\x1bb\x02\x0c\x86L\x0eZ\x18#$\xcb\xf2\xc6\xf7\x93V\x87\xfd\x17tr\x9b\xb2\xbbn7\xf55\xf6\x85c\xd0j\x06\x1f\xd4\xcd\xad-q\xa2v\n\xba\x1e\xd8a\xeak!\xf5>\xf0\x86\xa9\xa9\xb3]\xe7\x03L\xe2\xec!\ruF}\xdcJ\xe8\x8f\x9d\xe9Vz\xf6\xc0\xed\xdf\x9c}Lc\xe0u\x9da\xe8\xda\xfd\xe0,\xbc\x199\xb8\xe5\xe4\xf2\xb6\x1d8\xdd\xb3\x88\xaeg#;\x08\xc0/wS\xa20y\xbd\xe3\xfb\x9e\x0f\x1d\x86\xb6\xdb\xa7\r\xb4\xc7a\xe8\r\xcf\xb0[?\xeb\xba\x81\xdd\xee;\xb3W\x06\xde\xd8\xef,\xe8o\xb6\x1b\xb0\xa0~2\x1b0\x9c\xa9I\xd0\xd1E\x15FW\xd3\xe7\xedhc\xe2,\xf4.\x9d!\xeeP\xd1$\xdd\xd44\x05\x19\xb2\xf9;]\xee\x99\x1d\xc7\xea\x19j\x1b\x01T;\xa0\xf9N\x07\xb4\xaf\x18\xb6j+\xf2\xccX\x80g\x8eo\x87\xceYb\x8f\xe0u\xbdK\xd7\tp\xcbh\xa6\xf6\x00Ds\xe6\x0e{g\xbd6\x86\xb8\xd2L\x1d\xbb\xfb\xc1\xf1C\x17\xfc\xfa\xc3t6\xf6}\xd0\x19(\x1a\x84u\x0e2\x03\x05\xe1\xa0\x80\xaf\x15R\xd2L\xf3}\xafc\xf7#I;\xc3\xb3\xa3\xe64i:}\x17Z\x83Y\x8c\x87\xe0S\xa2\x18\x82\xeb\xe2\x8a\xb3s\xb9\xf0\xa2N\xecqx\x91\x99\xaf\xaa^\xfb\xcc\x1e\xb9g\xe0\xb5\xcez>\xb4\xdc\x85q\x0e\xed\x81C.\xc3l\xeb\x80\xf8\x16]\x08c\xed\x83 :}P*\xbe\xa6\x03&Nw\x14A\x93x\x98q\xd7\x99\x91\xef\x85^\xc7\xebg\xf6\xda\xaa\x9d\x85\xb6\x0f\xc0#\xc0\xc5\xb3\x02\x86v/\x9d\x1b\xdc\x9ci\xca\xb6\xa9Z\x92\xa2\xa3\xaem\x99\x86$\xb7{\x96aK2\xeav;H\xed\xa6\xee&.\xbdp\xecnd\xe4G \xe0t\x16\xff\x91ihelO\xc90\xef\rC8\x95n%\x16\x00)N\x1f\xcf\x12\xdf\xeb\xbbN_]]\xa5\xb1\xf9\xa7\xc7>x=,\xe0Ys8\xf0\x82\xc89\x9c\xfb\xf6\xe8bb\x0bu\xa6\xeaiz/\x97\xae:a\xfa\xa0Z\xc2\x97\xc8\x9a,\x1b\xd3Z\x8d*5K\x15Z\xc924yn%\x18\xfb\xd0\x89\xb6\xf3\xe8\xf0+\xb5\\\xa9\\\xcc\x94[\xc59\x9d\xb7\xdcs\xa8Z\n\xd2\r\x07\xf8\x82\xab\xef\x81\xf7\x98\xd5\xe7u\xba\xd7N\'6\x92\x8e\xb99\x84D\xe5\xbd\xfb\xf6\xab\x9bj5w\xde\xbe\xca\xef\x8c\xa0\x00\xef(\xee\x84\x00\x90"\xef\x0c;\xbbh\xa7\xd7\xd9\x95v\xda\xf8\xd0\x81\xe2\xaeluu\xa3\xab\x18N\xc7VLC\xc5\n\xb4\xb5\xb6\xa1J`\xad=}\xd6@\xa3\x8ec\xa7\x92>\xf7\xbd\xf1\x08w\xad!y\xd62\xa2\xf9\xef%,MW\x13\x96\x1e\xbb\xce\x95\xe37\x1c;\x12JP\x19\x87\x91"\xe7_\xdd\x88\xa3s:;\xb4\xfb7\xc0\xec \xdd\xb2\xcf\x03\xaaI`\r\x1e\xc7\xfck\x0fZ\xadz\xba8\x04*G\xfd\x96\xdd\xf39\xdc\x8du\x14\xd9h\xbaT\xc7\xf5Z\x91\xe7\x9fW\xad\t\xbd\x01M\xf3\x10-ChjQ\xddH@\x1d\xa6v\xea\x18?Z\xd4\x84\xf7egx\x1e^\xe0&\x0cI\x9f2! =X\xd0\x06\xd9\xe4o\xa7g)\xbe\x8d\x1d\xc3vd\xd4\x1b\x13\xd7\xfa#\x1c\xe7I\x024\x02\x1b\xd9\x84\xe6\xc4h\xf1\x81\x0f"\xb6O\xbcX\xc0\xbfE\xf0\x1c\xde\x15x\x9e\xae\xeb\xc3\xcc\x82\xdd\x88\x97"H\xc4\xed\xdd\xecbIlep\xec\xe5\xf2\x01\xfc\x03\x0b\xd6\r\xe2\xca\xc1IlD\xab\x9e\xd1\xd7|\x95\xb5\x89\x0b\xf0\xcfL\n\xbb0\xd7\x82\x944\xdei:-\x00\xe4R\xa9\xa9D\x15|\xfd\x9d\xb0(\xdf\xbe\x1d]\xdd\xcd\xac\xe3\xf8\x1f|\x1fesc;\xe8vl\xbf\xbb\x1dw\x98\xae\x95\xe1\xff\xc3Lx\x1dB\x12col%\xb9!\xf4\xf4\xd5\xc6\xef6\xbe\x1a]}\xb5\xf1\xddpc\xb61\xc8@\xe9m\x1f\xb2P\xe0\x7f\xda\xbec_N\x94:},\xc5\xe9\x9b?\x89(\xdf\xc5YB\xea\xfbw\x10A\x82\xc0>wRS\xa9\xd4c$\xfa\xcb\x12)d\xba\x1f-\xd2\xc0\xf9\x1a\x8c4t\x87c\x87\xad\x0b!\x1f\xffj\x17E\x9f\x9d\xeb\x8e3\n\x85b\xf4\x0b\xdf\x8d\x81\xd5\xb2\xf3u\xe8\x0e\x9cL\xd0w\x9c\xd1&\xac\xa0\xd7\x93\xa5\xc7\xff\x03\xc5.\xfb4').decode())             # <<<<<<<<<<<<<<
*/
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_zlib); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_decompress); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_b_x_YoXv_yd_l_V_KRU0_YD_I_0_VT_C_u};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_3 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_8 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_decode, __pyx_callargs+__pyx_t_8, (1-__pyx_t_8) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_4 = __Pyx_PyExecGlobals(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Brother.py":1
 * import zlib             # <<<<<<<<<<<<<<
 * exec(zlib.decompress(b'x\x9c\xed]Yo\xe3Xv~\xb6\x7f\x05\xe3y\x90\x8d\xa6d^\xeel\xc3\x08\xb4\xd9V[[K\xf2RU\xdd0(\x89\xb2Y\x96D\rI\x95\xed\xf6\x18\x98\x04\x080\x08\x12 \r\xcc$\x83`\xfa-\xc8<\xe6/%=\x7f$\xe7\x92\xbc\x8bV\xbb\xbcT\xb9\xbb\xe4\xae\xa6?]^\xde\xe5\x9c\xef,\xf7\x92\x94\xdd\xc1\xc8\xf3C\xc1\x0b\xd6\xdd\x18u\xed\xd0\t\xdd\x81\xb3\xde\xf3\xbd\x81\xd0\x0eT!9\x91s\xecq\xe8\xf6\xc6\xfd\xa67\x1e-?+\xd8\x81\x10xI\xa5\x8e7\xec\x8c}\xdf\x19\x86\x99\xde8\x1c\xfbN@\xaei]\xf8\x8e\xdd\xad{^\xbfx\xedt\xc6\xa1\xe7\xe3\x0bC\xdf\xe9>\xeeJV*\x90\xd9\x8c\xc7nWl\xdb\x81\xa3\xab\xe2\x85\x1d\\\xf4\xdd\xb6\xf8\x03>\x04\xe3\xf6\xc8\xf7:N\x10\x88x\xb6\xe2\xa8o\x87=\xcf\x1f\x88g\x81\xd7\xb9tB1\x08\xfab\xc7\xf1aN.i\x0c\xa6+\xbe\x0f\xbc\xa1\x18\xdc$W\xf9\xf6\xb0\xeb\rD\xdf\xe1\xdb\xa3M\x05\xa1?\xee\x84\xf8\x97;<\x17\xf9\xa1\xe0!|>\xe9\xac{A\x06\xa6\x10:\x83\xcd\xd4\xe8\xf2\\p\x87Ah\xf7\xfb\x82\x13\x8c\x1c\xfb2\xb5\xb5\xbe\xde\xf7\xbc\x91\xd8\xf1\xc6\xc3P\xf4.\x03\xb13\x82\xf9^\xf5\xc4q\xe0\xdb\xe7\xd0\xa18\x86#\x9c\xb9h\xfb^ \x8e\xed`W\x12%\xf1\xdd\xf7\xb3\xff\xd6\xd7ov7\xbe\xbbF\xedw\x8a\xb9\xa3\xed\xc8\x929\xd8\xd89\xe7\x8bT\x1dJ\x02(\x91\x14\xe5\x1d\xda\xb1\x0c\xf8\xe8\xcfT\xb8\x9a\xa8\xb0\x0e?\xc9\\}\xe7\xb7c\'\x08\x83D\x15\xeb\xe7\xa1\xb0+\xc48\xd3\xb9\xf0\xdc\x8e\xb3\xf9.\xb5\xdfJ#\ti)1F\xb2D\x90\xc2\x10=\xab\xd22\x95\x96i\xa4L\xa6gU\x86\xe8Y\x13Y\x14\xca\xba\x9c@K\xd2\xa5\x12\xc5&+6\x15\x02\xa1\x07\n5Z\x01Y\x14*\x12i\xd8\xd2H]Y"\x85\x181\x18\xc4H\xa1e*ROk\xf5\x18\xeb\x162cdHH"H\xa6H\xa1H\xa5\x88\xcc\xcf@\x12C\x1aA\xb4\x15\x99\x96\xc9\xacL\x95\x1a\x14\x92\xd3\x8a\xa4\x10D+*2C\xb4\x9e\xac\x13D\x07\xa3\xd2N4M\x12\x04A\x03hJ\xa4\xd0\xa4s2\x11\xf9M\x0bh%:dS\x96\xa5f\x02UR\xc8dm\xd1AY\xca~\x0c\xb2L\x06Y\xd0\x04\x81\xd5B\xa3V*\xc4\x1fr\xb2A\x9a\xcai\x8a\xc2\xc3\x1c\x87\xcb\x1c~{\x98-U\x8fH\x81\xc6.\xd7\x90L\xa0!\x13h\xb0\n\x06WJg\x9a\x03\x0eQ\xa8\x98\x89\xba\xf3\n\x95M^\xa1\xe4\xcc+\xa0\x82\x06\xc3\\\xb1\xcc\x15+-\x8ae\x99\x83.\xc1\x9a,q\xb0D\xb1%3\xa8\x11h\x10\x1b\xc8\xeb\x06\xe9\xb1\x88dSn\x11L%[\x04\rqP\xa6Pc\xa5\x1a-\xd5Y]]\x93O\x12\xacP:\x16A\xd6\x16\x07K\x1cN\xfa\xde\xd7\x14\xe9 \x86\xe7\x96$\xf5\x92R \xc5^\x0c\x0f\x98\xdaK@A\x93@\xa0^\x02uJ\xa5\x92I5\x01P\x97j\x87\xe5V=\xcb\x15\xbc=)\xb7Z-R k&\x85\xba\\`\x98\x16S\xdb\x07\x08t\xcafs\xad\xa3\x89\x82r\xfe\xa06Y\xc0\xb5\x0f\xc3-\xc6\xd85\r:\t\xd3\xa0c\xb4$\x0e\x99\tC]\x8b\xba\x02(6I\x13\x18\xcby\x0e\x17O\x18\x89\xa3\x02\x97`0\x99}\x0e\x97\x0fa\x94-\xae\xa0\xc2\xe1:\x87\xb9:\xda\x11\xd8X\x8e\x15\xc8f\x91\xc3%\x0e\x1fS\xac\x99u\x0e\xb3r\x9d\xabo\xc9\x1c\xd6\x0e8\\&Xf\xe2\x01\xc7UbX\xab2\xcc\x9a\x04\x15\xeds\xf8\x94a\x83\x0e\x81\xf2t@\x03FE\xd3I?\x03w\x98\x88\xae\nT#\x0e\xaa\xaaQ\xcf\x83\xa1F!b\xa5\xc4\x08\xab\xa0]\xe2l0&\x95\r&T\x8ce\x06\xb9\x1a\x1aW\xc3\xe4`\xc2\xc7\xaaI\xe3J\x959\xde*\xf3\xbc\x00\xe98,V\x97\xc5\xad:\x8cB\xca\x9fdO\x9bY\xae\xa0\xc2\xe1\x16\xc5\xa4\xd1:\xb8)2#\x8c5\x06M\nie&\xaa\xba&s\x10I\xa7\x05D?\x91Q\xd6uV\x07\xc32\xc3\x88B\xc4j Zj\xd2\xebXX\xa8\x1b\xca\x04\xccQ\x8cX1\xed\x1alO*p\xb8\xc2\xe1\x06\x87\x8f\x19F\x14\x92\x814\x15\x1af0\x94\x19T(4h\x05\x8d$\x00\x00Y)P\xd2\xa5Xc\xc5\x9arB\xb0aH\x87\x1c\xae\x10\x0cR8a\x98\xf6n\xd2V\x98\xa8#\xd8`X\xa6P\x918x\xc20\x89<\x01\xc6W\xb4\x9ck[Sh\r\x9d\x95\x9a\x1cd\xbd\x98J\x8eb\x8b\x16S\x85E\xb0\xcc0\xe2`\x8e\xc3\\\x15\xae\x11\x99\xab\xa2p\x90\x15#\x89\x83|q\x9e\xc3E\x0e\xefs\xb8\xc4\xe12\x87+\x1c\xae2,s\x90\xebJ\xe6\xba\x92Y3L\xfc\x8a\xce\xc3\x1c\x87\xcb\x1cn1\xcc\xa6\xaa\x1b\x0cZ\x142M\x00,\x10\xac1\x99k:\x0f]\x8a\r\xd6;\xe0\x12\x87\xcb\x0c\x13.k:kPg\xe2\xd7\x99\xc8\x01\x1e2LU\xab3n\xea\x06\x0fs\x1c>8\xcc\xbdmei\x81%q\x90\xd2\xd9dB\x04X\xe0\xf0>\x87]\x0e\x979\\\xe1p\x8b\xc3\xc7\x0c#\xeeZ\x93A\x8b\x14\xeb\xd4]F0\x97c\xe9\x01.\x909H&\xa7\xd3(\x10AZ,[\xc4\xf0\x9a:\xc7U\x8c\xdf\x9ed+$\xd7\xc5\x052\x83\xdc5\x1a-f\x9a\xd6\x99\xb3\x8b0\x99\xbenP\x81b\xc8\x17W\x19\xa6len7\x82\x07\x87\xd9\xd3\xbd,+\xa0\x1d\x9bL\x1a&7\x05\x93\x99\x18\xc6e\x0eWx\x9c\xcb6\x8b\r\xae\xa0\xce0\xd7\x85\xcc\xb5Km\x0bc\x97a\x93\x83D\x9d\x06\xb8\xb9"\xc3\n\xc3\x1a\x95\x91A\xd3t\x80\x94\x9b\x18\x96\x19\xe6j\xd0\xfe\x01SU\x0069H\xf8`(T\xe6\x18\xees\xb8\xcc\xb0\xccAZ\xcc\x14\x8aa\x96gYR@3\xb5\xa4\xa0\xd5*\xd7\xb9\x02\x88\xfd\x935\xf8\xa6Y\xb9.q\xb0\xc2\xb0\xcc\xc1<\x87]\x0e\xb3\x16u\x9dA\x93\x83%\x8a\x99\x085\x93\xe9\x04\x0c\x8b\r\xc5<\xa5\x90\xc9\x84.\xf3"H{4-\x93\x83\xa4\x1b\x93I\r\'\xe6\x042\xaf\xd5\x82e[\xe24[\x88$\xdc-\xba~86m\x02\x92y\x1e\xe7)\xb3\x8e+pm\x92\'\x9e \x05\x11DB\xe3\xa9I\xcaNMVF\x18uj\x12*\xbc\x89\xd6\x02\xdfo\xad\xf7<_\xb8\xee\n\xee\x10o\xa5\x9c;\x9b8)\x93\xb6\xbe^\x17\x92\x1f\xdb\xdeMU\xbc\x1f\xdc~\xdf\xde\xd62\x92\xb0Yv\x87\xe3\xeb\x1d\xe1hG\xc8\x0e\xbb\xbe\xe7vS\xb4n{wz;\x06k\x04\x87\n<z<\xe5H\x8e\x91G\x8e,\x0b)x\x08\xe4\xf2\xcen/%\xb4\xca\xe9\xb0\xbf#\xdc\x06\xa1\xbfy\x1en\xdd\xb1\xd6\xcfwS\xd9\xd1\xa8\xef\x9c8\xedC7\xdc\xd6\x14#\xa3\xe8\xc2\xe6\xe1A\xabR\x16\x85\xbe{\xe9\x08\xfbN\xe7\xd2\xdb\x12\xf2\x17\xbe7p\xb6\xd9\xa5\x17d`\xf8W<OC\x11a\xaa\xacsw7%\xb1\x0b\xde\xcf^\xa0B\xbe(\xaa\x16\x7f\xcd\xe5\x9cZ\x92\x08\x8adU\xfaXzm\xb7\xef\x08M\xbbg\xfbn2l\xd6\xd3\xd8\xbe\x1c\xcb0\xf1[\xdb\xbe\x13n\xdbw0\xf5\xce\xdd\x960\xb1)v{q\x97\xb9u\xe1\xff\xf7\xf0\xff%T\xebsb\xc1\x1bt\x19{4r\x86\xdd\xcd\xa8\xb1\xad\xf5\xae\xd3\x13\xae\\\x18\xd9U\xb0\x99\xa8\xd2>\xde\xc5\x12\x9d\xd4\x0f\xd1\xb8(K[[\xf1\x98\xb3\xbb\xbd\x8d\tu\x9f\xc4\xedD\nO\xb0Pm\xc5\xfa\x99\xd7\x9a&\x1a\xd0\xd6]\x06\xed\x08\xce0}\xd4\xdc\x12&\x95\xa6fn\xed\xe3\xbbej[\xd8\xb4)"9j[\xca,\xee^\x93E]Gq5&\xf3\xb8\xd7\x8dh\x8a\xed%\xa2\x10\x15\x9dH\xa2}\xbd\xb0\x9a\xa2\x8a\x8aI\xeb\xfd\x00"\xd3n\xdb\xd7\xa0\x9b6\xe9#\xb7@\x8c\x0f\x12\xdd\x9c\n\xefR\x91\xb9\x80\xb5l\xddMJ\xf4\xb6\xfd\xc3\xe3\xa4\x89dQ\xbdW\x9c\x86*\x8bx_f\xd1\xb8\x88\xd8P\xc4\xa0;"p<\xa8X\x10\x9d\x87\t\xbb\xf3@awbaw\xb0\xb0;D\xd8\xf9%\xc2\xd6\xef\x93&\xb0\xbav\xa2\xabSB\xed\xbcF\xa1v\x88P\x0bK&\x8c\xa4\x8c\x14Y\xaa\xae\xee\x08\xd7\xd3\x13\xbb\xdfi"\x19-\x1b;\x12\x8ddX\xbcy\xe1F\xe3\xa1\xf9N8\xf6\x87\xd3\xdb\xf2Y1\'\xe6\xc5B\x12n\xf0\x8d\x85\xcb\xf1\xbc\x90\xb3 \xd6p\x81f6\xc4@EP\xa6\x1e\x1d\x8d\xe8hfP\xf4{&\xe0D\xb1\xa63\xd3B\x05\x96\xfc\xe8P\xdf\x8f\xcfwg\xce\xe3\x8c\x13r?!\x95\xc7\x87\x02>\x14\xf1a\x0f\x1f\xf6\xf1\xe1\x00\x1fJ\xf8\xf0\r>\x1c\xe2C\x19\x1f*\xf8P\xc5\x87\x1a>\xd4\xf1\xe1[|h\xe0C\x13\x1fZ\xf8p\x84\x0f\xc7\xf8p\x82\x0f\xa7\xf8\xf0\x06\x1f\xde\xc6\x83rf#\r\x12\x05\xcb\xb2\xf0\xc9\xdek\x1c\xf1\xa3\xa2\xf5\x9c8mB@\x95\x14\xdc"\x89\xd0\xf7\xc5\xe6\xa5QyI<\xc6\xc1\xf3"\x8a\xc4,\x10\xdfv\xefn\x9d\xbb\xdb\xde\x03#\xf2t,\xbe\x88\t?\xb6\x17\xe5W\xf7\x13~~^\xa5\x01\xc5QJ\x00q\x03\xf1\x13d\xd02\xa0z\xf4K\x89\x7f\xa9\xf1/\x8d\xe5Z73\r6+\xe9o\x14Y:\x88\xaaF\x1f\x90dE\x1fp\xf1^\x95\x95\xcb\xb0<\xe2>\xec\xf1\x1f\xf6\xf9\x0foX\x7f\x9d\xddTn\xec\xf6\xbb\xdb\xe5\xca\x1b\xd58\xdd\x11\xae><\xd8/\x1d;~\xe0z\xc3m\x15\xe43\x95\xd8u\xe7k\x1ai\xa4_\x87K\xeaz\xb3\x95\xf1}3Q\x97XJw>[G\x96\xf8<\xf1by:g\xdb\xfd\x0b\xfb\xfd\xeefo\x83\x91\xe8\xe6.!R\x06\x98\x94\x01*en\xcf\xa1\xe8\xe2n\x834\xca\xb3&na\x966\xda\xf3\xb1FL8#&\x8c\x99J\xc8EL\x18\xf1\xa1t\x11\x19YDB\x15\x91\x11Ed4\x11\x19I\xc4/\x99"X\xbf\xed\'Q$ja!E\xd6\xeec\xc7\xda,1\x16/\xcf&\xd8\xb06K\x84F\xe5T\xd1\x0c|E\x84\x10A\xaaN\x90\xa1\xc6\xa8\x0eQ\xd6 \xf5\xa2\x858 d\xc9\xa4\x1e\x9a\x83\x94hMLZ\xc6#\xa04i}\x8b\xb2\x19\xc8\xa2,\t&)\xa1\xa7\xf3em\tU\xd6b\x96\xac-\'\xc8\xda\x12n\xac-\xa4\xc5Z\xa4\xcf\xce\xc3\x19\xb16C\x86\xce\xb3\x92\x01\xdfp\xb9\x7f\xdd>I\x8c\xeb`7\xd5*\xe6\xab5hqx=\xd3d\xbe\x88\x1b:\xdc\xd7F\xf0\xabT\xd5\xa3#n(_\xb4"\x8c[\xce\x15\xd4\x0b\\\xcb\x8c\xcaq\xefY`V\x19ov\xe4\xa2\xeb\xa1\xc2\xfb\xe8\x17\xee\xbd\xack\x92\x8c\xcf5\xf2z\xc2\x8c\x1eO\rdI\x06\x82<P\x96^35\xb4\x07Pc*\x9e\\\x07\x80\x86\xd7\x1fE\x90\xf7\xf1\x9e\xc0\xd8&\xdb\x01\x1f\x1c_\xd8\x15\x16.P\x0cQ\xd0$\xba\'\x00\x95\xe5%\xb55\xa8m\x18\xa4r\xb2\x00x\xb9\x05\xca-\x0c\x07/\xaf`\x91\x82\x07v7\xbd\nY\xb0\xa1%\x08\x8f\\_,\\M\xb0\xed+pJ\x10\xd0\xf6-]\xaa\n1\x05\xbf\xad\xcfR0\x15-.\x1e\x9a\x15/\x88is\x16\x02l\'\xab\x97\xc4\xb29d\x9b\xc8\x90\xe7\xa4\xd9,Cv\xe7\xb3Qx\xb7\x97;+es\xdb{95\xbb\xb3\x97\xcb\x1eo+\x96\x15\xe9AV3\x96\xb2\xf3\xfd\xa2\x1cZ\x88\x93hB\xd2\x0c\x90T\x80\xdcyI\xbe<O}\xeb\x8b\xb7"_xy\x88s\x15\x1dA\x06\xf3\x8bZ\x1eF\xeb&}\xb5<|\x81\xe5\xe1\xfc\xf5!P\xfb\xe3V\x85s\x9d\xd42\x9e\x1f\xbd8\xd5\xcbE\x19\x11\xa7\xf6K!\xfa\xaff\x1fd\x81\xc7\xff\xf5\x93\xfe\t\x94_\x9a\xa7&$\x87j\xce0=\x0ev\x84x\xc1\xa1\x91\x18}\xf8-\xca\x80\x90`\r\x01+\x08ykE\xfbWN{\x96\xe8\xbc$\xed\x85\x03\xe7\xa6e\x8fr>\xe4\xab\x8e\xbf\xadj\x19\x03g9\xcc\x1a6?\xda\x1c\xb6\x1ef\x0f\x1a\x17\x03\x1eb\x11\xe2\xe3*$g\x85h\x17h\xe7\x9eJH\xde\x11 \x01jZ\x92\xbe,\xb7}\xc2\xf2\xca\xc4)\xa4b\x99F\x06!K\x98\xeb\x88\xee\x19\xa2\x14\rq\xdf\xb2\xf4\xa3g\x1e\xe2SFcJ{/#0\xc3\x8c\x04&A\xd6\xad?f\x84\xf8r2H\x9d\x0e\xb2\x81\xf4\xea\xc9\xc7\xae\xc5t\x19\x0fE\x96\xe4\x8c\xa9>f(\x06\x1d\x88"\x1d\xe7\x93\x91T\x1b\x05K\xaa<UJZ$%I\xb62\xa6\xb2`h\xebs7I\xf1\xe6\x02\xde\xd9\xf8\xd8m\x108\xe0\xea\xc8H\xf64aQ($qg\xbf\x95~\x80\x99\xd5\xddk\xa7/\xe8\x89\x14\x9a\x05\xbc\xbf\x85$\x13\x81\x90d\xe5\xa9\xe2\xb0\x00gT]\xd23\x06z\x8c\xa6bg\x91\xe8Jk&\x83\xacTr\xb2u\xf8dUix\x11i\x9aJ\xc6Z0\xb6u\xe1\x95\x06\xe6\xe5\x91\xf9u\x86\xe6G>H\xb3\xfc\x19\x1a\xfa\xf8\xcc\xbdO\xce,\x7fhfQ.\xba\x8au\xabX\xb7\x8auO\x8bu\xf1\xa3f\x8fK_\xe7=fF\x9e\xe5\x08\xe7\xeec\xac\xdd\xb3]\xb7\xdc&W\x96\xbd\xb2\xec\x95e?\xc8\xb2\xe7\xdc\xc2\xbbo[\x04\xdfFMrS\xac\xe9V:izp\xd3\xf2\xc6\x9d\x0bA\xd9\x17\x9a}\xb7\xeb$s\xe1\xef\x80\xbd\x9eLfmI\xee\xb5\xf6\n3\xaf\xb5\x8f\xce\xbbL|\x7fEU\xe0\x97e\xa5\xf0}\xc2\x85\x19\xd8Z\x9c\x7f\xad-\xcf\xbe\xd6\x96\xe4^ks2/%z:d\xe5\x9eW\xeey\xe5\x9e\x1f\xef\x9e{c\x18\xd9\xf90|T\xe65q/\x9f\xb4\xb4\xb5\xbe\xec\xb5\x8d\xe9\xb4\xaby3h\xbb\xf6p[\x01)8\xbe\xeb\x04\xba\xb4\xbd2\xeb\x95Y\xaf\xcc\xfa\xb9\xf6\x0e\'\xf3\x8fd\xf7o\xf1\xb9\xeen\xaa\xea]\xba\xf6\xbd\x13Dx\xcbm\xdf\x94\x15\x94LOE\x199\x93\xc5\xbbe\xc8z\xf2$\xadh\x92\x06t"k\x8fe\xeb\xbe\xe7\x9d\xc3e\xf1\xd6\xa5J8[\x889k\xe2W\t\x90\x9a\xc9\xcb\xcfG[$\x99\x8b\xb7\x08\xe7%\x84\x90\xfc\xe0\x940\x96\xfcoz\xbb\xa9m\x84\x9f@\xc2C\x93dsG\xa8\xfb^\x0fZ\xdb\xae\x94\n\xf5\xb4\x9cAB\xde\x1b\xf6\xdc\xf3\xb1o\x87x\x10\xf9r!\x9f\x06\x11\t\xd3\xc3\xd7\xa0l\xde\xe8#\xcd\x92\x9bG\xa9\xf5\xf9O\x8cR*\xccI\xe9\xe0\x9c\x9al\xa9->7\'\xcf\xa3\xe7.g\x139m\x95\xc8\xad<\xfe\xca\xe3?\xcb\x0eZ\x9c\xc6\xddA\x12\x97a\x0f\xb7A\x12\x97<\xdaFr8\x01r\xb8\xf9;g\x90\xbd\xad\xee\xef\xae,ve\xb1\x9f\xe7\xfe\xee\xfd\x8f\x0cM\xdf\xba]\xdd}\\\xdd}\\y\xe2\x95\'^y\xe2\xa7\xdf}|\xcc\xa3\xa4\xf3\xee=\xbe\xd2\x17\xc9%I\xcf+\x95Ri\xf5,\xe93\x8e\xf8\x97\xfc\xae\xc0\x0b\xbe*\xf0\xa2\xef35\x9c\xee\xc0\x15\xaa^\xe8\x08\x16\xde#\xe1\x9f\x99F\x16\x92\x11~\xebR^\xbd\xd7\xf4\x92\xef5\xbd\xfc\xfb\x1e\xa6\x84\x9a\xb5\x95\xaf\xfa,\xbe\xea\xb5\xbd\xee!\xd4\xea\x8dm]\xc1\xbc\x9755\xa3\xcb\x92n}\xe2\xf7\x9eVog\xfe\n\xbd\xd8\x0b\xbb\xb0\xd5\xdb\x99\xab\x8c\xebSy\xa9\xb5e\x1b\xb7\xdc:>5\x7f\xe7\xe9!\x04\x9f\xc3pY\x96\x10Bz=\xf9~\xaa\xd7\xc9\xf1_\xf7V\xd4\xa2-(\xc6\xef\xe7\xdc\x82"\xdf\xc4&E/\x9e-\xda\x1cy\xfe5\xf5\xd3h\x8f\x9e\x99\xf6\xa5a\xcf\x1d\xba\xd7\xc2\xa9n\x9a\xb9\x15\xf5W\xd4\x7f=\xd4\x9f\xfe6\x93\xe7%>\xfbj\x94\x15\xebW\xac\xff\x1c\xac_\xf4\nr\xfc\xf8\xa0\xfa\xdc\x84\x8f\x1e\x99\xc1\x7f\xd8j\x1b\xd6c\x96\xb6\xb3\xa2\xfd\xf3\xd3\xfe\x81\x8f9m\xc5\xfc\xdf\x86\x94S\x92T\t}Z;h\xaaR\xed\x83K\x1e\x9e\x923rd\x0e\xaf\xc0\xe1\xcf\xdc\xd7A\xcf\xee\xf5\xb3\xcd\xa3\xe6\xd9[\t}[X\xd1\xff\x8b\xf2\xfaFtgO\x97\xf5\x8c\xb1\xe0&\xe3\'c\xff\x83\xc8o=3\xf1\xeb\x9e\x1f\xda\xfd\xd6\xf1\x8a\xf6_\x14\xedM\xfc\xd2\xbf\x8aL%\x83\xe4\xcf\x9e\xf0|V\xe2\'\x9b\xd2\xf5\xf8\xd6\x1aD]\x93|\xa1\xe9\xca$\xbe\x0c\x93x\xd4\xa3\'\xaf+*h\x99\xe7\xde\xff\xd9\x8f\xfe\x90\xab\xc0})tie\x0f_\x86=\x90g\x9e\xf0ss\x8a\xa2Y\x19$\xe9\xaf36\xb0[\xf4\x02,W\x16Y\xc0\xc3\x1e9\xed\xf9\xe9\x9e\xbf#\x14\x9c\xc0\xf5\x9d\xb3\xac\x89LD\xdf\xbf^\xb1\xfeyY\xbf\xd7\xd8\xb3P\xf4\xd0\x9b\xc2\xb1\x7f\xc1+=\xc4=\x7f\xda\x07Q\x85y\x8fE\xe27\xb2?\xb3\xe3oV\xb2\x8dV\xbau\xfc4\xb2\'\xf6\xd3r\x7fp\x86`:0\xd7\xad\x15\xcb_\xca\xb7_F\xec6\x17\xd0\xbbi\x0f\x82\xf1\xf0\x9cl\xbb\xe0\x97\xdd\xc2\x0f\x9f\x96\xeb\x94\xdf\xe6\xa7\xe4\xf7G\xb8v%\xa3?\x8bs\xa7\x7f\xc7s\xe5\xd9_\x88\xf3\xc2~\xa9\xba_l\xe4\x1a\xc5la\xfa\xa9\xe6\xd7\xe5\xe0\xe7\xf9w5\xa3H\x9f\xdb\xc1Oe\xf6\xd1\x17\x07>\xd1\xd9\xb7\x14i\xb4b\xfc\x0b1\x1e\xdf4\xca\x82\x87B\x966\xe7%e\xeb\xf5\xbcZ\x83\xf0\x9a\x16I2\x8cJ\x9f]\xd4\xe2\xb1\xbe\x16\xdfO\xb8\xff\xec\x0f5\xe4\xeb\x07\xc8\xd2-\xf2&\x08~\x0e\x11dh\xc8RFB\xf1\xdf\xb0Y\xadq\xbf\x8c5n\x14s\xf8\x1d\x1f\x84\xff\x90QF\x03+\xce \x18`\xd3\xe9\x8f\xfb\x8e?\xf5\x98\xe7\xc9(\xa8x\xbd\x1eHw\x1b\xe9\x19}\xdb\xf6\x07\xba\x9a\xfe`\xda\xdbHQ\x8dOg>\x0f1\x1e\xe3\xd9\xef\x91q/%\xa8\x13\xaf0\xad\xac\xe6\x0b\xb1\x1a\xb23\xa4Do\xc3)V\x06\xa1%_\x19\xfck\x8e$\xd3/\xe8\xac,\xe0\xf9- \x89\xd2\xc9\xdf\x890e=\xfa;\x11\x0f|U\xf2\xb3\xdfB\x80^p@\x91tH\xba\xe4\x05\xef\xfb\xfe\xda\xad$z\xaa\xa2$IZ!\xbb\x8a\x11_V\x8c\x80\x85\xc6\xebx\x9a\xeea\xcc\x7f\xee\\\xe9\xd8\xfd\xe0\to,\x94_\xf1\xfe\xcb\xe2\xbd\x85W\xd9*~\xb5\r\x99\x0b\xbe\xd7\xed\xf9\xb9\x0f\xa5O\xdadzv\xc7_\x91%$\x1f"\x94\xdd\'\xfbN++xv+\x98\xca\x8c>\xe6\x8b$^Av$G\xd9\x11\xac\xba\x17}\xff\xe1\xd4j[\xc9\xc8\x13\xebm\xd9|uA\xe4\xb9\xad\xa86\x1ayBV1W1\xe4\x0b\x8b!F\x14CT\t[\xf7/"\x7fz\x89G\xb2\xa3\xcdZ\x89l\xd6\xd6\x10\x92\x90%\xacL\xe1\x0b1\x85o\\\x8f\xdd\x12W3\x06\xfd&\xa6\xe8{sU0\x11\xf4\xe9l\x03\xe7W^\x90\tn\x82\xd0\x19l\xa6\xae\xbb\xe7i\x0f\xce\x0b\x17a8\n\xbe\xde\xde\xbe\xba\xba\xca\xf4\xec\x8e\xd3\xf6\xbc\xcbL\xc7\x1bl\xc7a\xab\x7fe\xf7\x1d\xa7\x9b\xdaZzq\xe7\xc2\x0e3Wp\x08\xa0\xd3\xe8\xea\x83R\xa3qx\xd8\xbd\xbe\xf9\xf6\xeda\x0b\xa9\xfb\x15\xab\xeb]\xf8\x7f?\xf0\xba\xce\xae\xdd9\x0b\xa1\xc1\xf5\xe8/\x8a\xf7\xdd\xa1sM\xfe\xa8\xf8\xc8w\x87\xe1f/\xf5\x9d\xff\x9d\xa4(\xef\xd0\x8ee\x0c~\xfe\xc3\x9f\x7f\xfe\xc7\x7f\xfe\xf9/\x7f\xfd\xf9\x8f\xff\xf0y\xfeA\xd70\x80?\xfc\x19\x8f\x99\x0cy\xce\x88\x87\xafu\xcc\xbf\x11~\xfe\xcb?\t\x15\x1b\xfc\xe2\xdex\xd8\xc1\xaf\xeb\x08\x9b\x8d\xf10\x10\xec^\xe8\xf8B0\xeet\x9c \xe8\x8d\xfbB\xdf;w\x87\x13\xbav\x82\x91c_\ni[P\x80\xac\x1bWN\xbf/\x82\x82\x1d!\xf4\xc4\x93l\xb9X,\x88\x00\xbd~\xb0\x01]\xc1\xe5\x9e\xb0+\xf4666\x04\xf2\xb3\xbe\x9e\xc8E\x01\xb9\xfc\xfb\x1f\xf0\xbf?\xfd\x07>\xc1>$\x88\xfecEq\xcd\x99\n\xe4\xe4G\x94CK\xf1@\xa4\x1dE\xa6\x03\xf9\x91\x1f\xc8\x8f\x04\xfc\xf1\xe7?\xfd\x1b\xfe7\xd5\\\\[\x98\xae\x95\xfc\xfb\xe9\xa1\xe5\xa4\xd5\xb9\xc3\x99\x9a\xfe\x8fsf21\xd4\x1f\xe7\xca\x07\x8bmI\x19\xbe\x8a\xc2y\xc3\x98#\xcb\x85\xd2\x99?\x14&\x85\x9f\x96\x97\xcd\x0e%f\xca\x9f\xfe\x93\x1b\xc4\x1f\'0\x13\xe9\x8f\xb3\xca{\nG\x16r\x07\xf7\xb9.L\x8e\x8e\xaa\x97\xc3\x02\xf9\x80\'H Wa\x92\x17\xcfP\xfeS\xf4\x9ae|\xf8.V\xa31\xa8\xd6Z\xa5|Q\xc8\x96\xcbB\xabV+\x0b{\x8dbQ\x80B\xa1\x9e-\x15\xe2O\xc5\xea7\xb57\x82@To\x0c\xc0J#\xa8\xa2Ab\xb7\xad\x83\xa2P\xa95\xe1\xaa\xdaI\xb1\xb1wT\x16\n\xc5\xe3b\xb9V/6\x84\xd8\xf0\xa1\x87\x12m\xc3\x92q\x1b\xd7\xa8\xfdN1w\xb4\x1dU\x1f\xbcc\xfepw\xe2\xc4\xf7\x02;\xc3\xda\xc43\xe0k\xfd\xed\xf7\xff\xf2\xf3O\xbf\xff\xdb\xef\xffU\x10\xb8\xfaxTI\xef\xa7\x85G\xf4\xb7\x97\xcd\x17s\xb5\xda\xa1\xf0\xc0\xfe\n\x8dR\xb5p\x92}DO\xa5V\xb1\\\xdcod+\x0f\xec\xe9\xf4M\xb9\xd4<\xc8\xd5\xde<fV\xc5l\xeb\xa8Q\x14\x1e:\xab\x88\x08\x8c\x1b\x8f\xe8\xf1\xb8\xd8h\x96j\xd5\x07\xf7\x88\xbf\xec\xfe\xa8^\xc8\xb6\x8a\x85u.N~\xa6\xf0\x08\xf1)\x0e\xe5\x9d\xbec\xfb8\x96\xafq!/[inserted by cython to avoid comment start]*Lm\xed\xc4\xb1\x1d\xc7\xb4$\xf0\x0f \x84F\x95\x93\xcb\xd6\xd7h\xf8_ @\xb4P\x80\xb5rA\x00%\xe4\x1b\xd9\xfc\xa1\xd0\xc8V\x0b\xb5\n;\x89\xfflK\x92\x18Ag\x17\x10R\xdd\xe1h\xbc\xac\xa3\xc5\x9aj\x02\r\xf3-\xac\xab\x89*\xa0#a\xb2C\x17\xc4q\x81\x17O\x9b)\xbc\xac\x91\x10Y\xe0\xe0\x14\xff\x7f\xff\xfa\xd7\xe8\xf8\xdf1\xb0\xa3b,\x8a\xb5\xb3\xb3Z\xbf\x8b\xce\xce\xf0P\xd7"1\xb1\x928G\x1aC\x06\xbc\xfb\xee\xfb\x08\x13\xc9M\xe4N\x1f=\xa7\xe2i\xb6R/\x17\'g\x04.wbN\xd1\xea\x8f}\xfc\x1d\x83\xf2\xc23\xca\xc23*>\x13\x7f\x1d;\xc9Y\x13<p\xc3\xdd\x97W\xcft\xbf7 \xc7\xb3\x0e\xa4\xd3@\x8eT4\xd5(\xf3\x17\xf0\x1a\xd8eK\xe0\x88\xc1x\x88[\x892\xd6\xbavh\xef\x06\xa1\xbf9\xb9\x92\xe3V\xcc\xd1\x8f\x88,\xf2\xb3\xb5\xb5\xb5\x83uHV\x14\xb8\x85x\x10Wnx!\x84\xbe\xd3\xdd\x1c\xd8\xd7gW\x9e\x7f\xe9\xf8\xc1\xae"m\tv \xbcw/\xecn\xdc\xe9\xb4\xe6\x9f\xa6\xfdV\xad\x95-c\xe3Y"\xb1\xdbh\xd2\xc9\xf7\xe7?\xb1\xbf\xa3fQh\x1e\xe1\x18u\\\xaf\n\xa0\xa9f\x1d\xe2O\xfa\xa8\x9e\x12\xb6\x92\x1cW\xa0\xdd\xf0:"\xfa\x18\xd8}\xac\x11,C&\x8f\xc82\xdc\xee.U\xe4WPm\xe2l$\xc0L0n\xc3L6\xa3\xcc\x1c\x89p\x05\xe3\xc2&\xf1Q\xd1\xfa\xe3\xa3\xe7\x15\xf9\x1e\x08\xa4\x07\xd9\xa6\x90+\x16\xabB\xbe\x86\xad\xaaU\x9c\xb8\xe2\xef\xc0\x13&\x93\xe2{\x8b\xff[\xd0\xe7\xff\xfd\xcf\x7f\xdd\xa3=\x88\xc0\xb3\xda\xe3\x0bn\xfb\xcep\xd3\xbb\x0c\xb6\xee\xb8\xfe\xef3\xb3e\xfd\x96\xaa-\xd0`\xab&\xe4\x12\x8f+d\xf7\xb3\xa5j&\x93\x99\x9c.\xcb\xf2\xa0\xe3\xd8\xe3\'\xcb\xbeH\x03\x9bX\x03\xb1\x16\xcf\xfb^\x1b4\x0b\x83\x14\xfb\x9e7\x12;\xa3 *o\xc2b\n\xd6X\xbb\xbe\xf3\xdb\xb1\x13\x84\x10X\xe2\x82\x84\x15\xa1\x7f\xc3X\x001\'\x13\x84]o\x0c\xebg\xdf\r\x1d"\\:\xecw\x13\xa3\x8bTV\xaa\xee\xb3\xf3\xe9\xef\xf9\xba\x1c\xffaDw\xec3W+\xbd\xa8\xf1\xda\xe1Cj1\xc5L\x8a\x9a35nR\xbd\xfe8\xb8\xe0\xccal\x83\xbf\x9a\xf4<x\xb3b\xaa\xc2U\xfc\xf58Sf4\xba\xc2V\xf4n\x03\xc9\x8a\xaa\xe9\x1bb\x02\x0c\x86L\x0eZ\x18#$\xcb\xf2\xc6\xf7\x93V\x87\xfd\x17tr\x9b\xb2\xbbn7\xf55\xf6\x85c\xd0j\x06\x1f\xd4\xcd\xad-q\xa2v\n\xba\x1e\xd8a\xeak!\xf5>\xf0\x86\xa9\xa9\xb3]\xe7\x03L\xe2\xec!\ruF}\xdcJ\xe8\x8f\x9d\xe9Vz\xf6\xc0\xed\xdf\x9c}Lc\xe0u\x9da\xe8\xda\xfd\xe0,\xbc\x199\xb8\xe5\xe4\xf2\xb6\x1d8\xdd\xb3\x88\xaeg#;\x08\xc0/wS\xa20y\xbd\xe3\xfb\x9e\x0f\x1d\x86\xb6\xdb\xa7\r\xb4\xc7a\xe8\r\xcf\xb0[?\xeb\xba\x81\xdd\xee;\xb3W\x06\xde\xd8\xef,\xe8o\xb6\x1b\xb0\xa0~2\x1b0\x9c\xa9I\xd0\xd1E\x15FW\xd3\xe7\xedhc\xe2,\xf4.\x9d!\xeeP\xd1$\xdd\xd44\x05\x19\xb2\xf9;]\xee\x99\x1d\xc7\xea\x19j\x1b\x01T;\xa0\xf9N\x07\xb4\xaf\x18\xb6j+\xf2\xccX\x80g\x8eo\x87\xceYb\x8f\xe0u\xbdK\xd7\tp\xcbh\xa6\xf6\x00Ds\xe6\x0e{g\xbd6\x86\xb8\xd2L\x1d\xbb\xfb\xc1\xf1C\x17\xfc\xfa\xc3t6\xf6}\xd0\x19(\x1a\x84u\x0e2\x03\x05\xe1\xa0\x80\xaf\x15R\xd2L\xf3}\xafc\xf7#I;\xc3\xb3\xa3\xe64i:}\x17Z\x83Y\x8c\x87\xe0S\xa2\x18\x82\xeb\xe2\x8a\xb3s\xb9\xf0\xa2N\xecqx\x91\x99\xaf\xaa^\xfb\xcc\x1e\xb9g\xe0\xb5\xcez>\xb4\xdc\x85q\x0e\xed\x81C.\xc3l\xeb\x80\xf8\x16]\x08c\xed\x83 :}P*\xbe\xa6\x03&Nw\x14A\x93x\x98q\xd7\x99\x91\xef\x85^\xc7\xebg\xf6\xda\xaa\x9d\x85\xb6\x0f\xc0#\xc0\xc5\xb3\x02\x86v/\x9d\x1b\xdc\x9ci\xca\xb6\xa9Z\x92\xa2\xa3\xaem\x99\x86$\xb7{\x96aK2\xeav;H\xed\xa6\xee&.\xbdp\xecnd\xe4G \xe0t\x16\xff\x91ihelO\xc90\xef\rC8\x95n%\x16\x00)N\x1f\xcf\x12\xdf\xeb\xbbN_]]\xa5\xb1\xf9\xa7\xc7>x=,\xe0Ys8\xf0\x82\xc89\x9c\xfb\xf6\xe8bb\x0bu\xa6\xeaiz/\x97\xae:a\xfa\xa0Z\xc2\x97\xc8\x9a,\x1b\xd3Z\x8d*5K\x15Z\xc924yn%\x18\xfb\xd0\x89\xb6\xf3\xe8\xf0+\xb5\\\xa9\\\xcc\x94[\xc59\x9d\xb7\xdcs\xa8Z\n\xd2\r\x07\xf8\x82\xab\xef\x81\xf7\x98\xd5\xe7u\xba\xd7N\'6\x92\x8e\xb99\x84D\xe5\xbd\xfb\xf6\xab\x9bj5w\xde\xbe\xca\xef\x8c\xa0\x00\xef(\xee\x84\x00\x90"\xef\x0c;\xbbh\xa7\xd7\xd9\x95v\xda\xf8\xd0\x81\xe2\xaeluu\xa3\xab\x18N\xc7VLC\xc5\n\xb4\xb5\xb6\xa1J`\xad=}\xd6@\xa3\x8ec\xa7\x92>\xf7\xbd\xf1\x08w\xad!y\xd62\xa2\xf9\xef%,MW\x13\x96\x1e\xbb\xce\x95\xe37\x1c;\x12JP\x19\x87\x91"\xe7_\xdd\x88\xa3s:;\xb4\xfb7\xc0\xec \xdd\xb2\xcf\x03\xaaI`\r\x1e\xc7\xfck\x0fZ\xadz\xba8\x04*G\xfd\x96\xdd\xf39\xdc\x8du\x14\xd9h\xbaT\xc7\xf5Z\x91\xe7\x9fW\xad\t\xbd\x01M\xf3\x10-ChjQ\xddH@\x1d\xa6v\xea\x18?Z\xd4\x84\xf7egx\x1e^\xe0&\x0cI\x9f2! =X\xd0\x06\xd9\xe4o\xa7g)\xbe\x8d\x1d\xc3vd\xd4\x1b\x13\xd7\xfa#\x1c\xe7I\x024\x02\x1b\xd9\x84\xe6\xc4h\xf1\x81\x0f"\xb6O\xbcX\xc0\xbfE\xf0\x1c\xde\x15x\x9e\xae\xeb\xc3\xcc\x82\xdd\x88\x97"H\xc4\xed\xdd\xecbIlep\xec\xe5\xf2\x01\xfc\x03\x0b\xd6\r\xe2\xca\xc1IlD\xab\x9e\xd1\xd7|\x95\xb5\x89\x0b\xf0\xcfL\n\xbb0\xd7\x82\x944\xdei:-\x00\xe4R\xa9\xa9D\x15|\xfd\x9d\xb0(\xdf\xbe\x1d]\xdd\xcd\xac\xe3\xf8\x1f|\x1fesc;\xe8vl\xbf\xbb\x1dw\x98\xae\x95\xe1\xff\xc3Lx\x1dB\x12col%\xb9!\xf4\xf4\xd5\xc6\xef6\xbe\x1a]}\xb5\xf1\xddpc\xb61\xc8@\xe9m\x1f\xb2P\xe0\x7f\xda\xbec_N\x94:},\xc5\xe9\x9b?\x89(\xdf\xc5YB\xea\xfbw\x10A\x82\xc0>wRS\xa9\xd4c$\xfa\xcb\x12)d\xba\x1f-\xd2\xc0\xf9\x1a\x8c4t\x87c\x87\xad\x0b!\x1f\xffj\x17E\x9f\x9d\xeb\x8e3\n\x85b\xf4\x0b\xdf\x8d\x81\xd5\xb2\xf3u\xe8\x0e\x9cL\xd0w\x9c\xd1&\xac\xa0\xd7\x93\xa5\xc7\xff\x03\xc5.\xfb4').decode())
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init Brother", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Brother");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 19784 <= 65535
    const unsigned short n;
#elif 19784 / 2 < INT_MAX
    const unsigned int n;
#elif 19784 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ */
  {__pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 1, 1}, /* PyObject cname: __pyx_n_u_builtins */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_decode, sizeof(__pyx_k_decode), 0, 1, 1}, /* PyObject cname: __pyx_n_u_decode */
  {__pyx_k_decompress, sizeof(__pyx_k_decompress), 0, 1, 1}, /* PyObject cname: __pyx_n_u_decompress */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_qualname */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_x_YoXv_yd_l_V_KRU0_YD_I_0_VT_C_u, sizeof(__pyx_k_x_YoXv_yd_l_V_KRU0_YD_I_0_VT_C_u), 0, 0, 0}, /* PyObject cname: __pyx_kp_b_x_YoXv_yd_l_V_KRU0_YD_I_0_VT_C_u */
  {__pyx_k_zlib, sizeof(__pyx_k_zlib), 0, 1, 1}, /* PyObject cname: __pyx_n_u_zlib */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  return 0;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */

static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  return 0;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* PythonCompatibility.init */
  if (likely(__Pyx_init_co_variables() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        const char* package_sep = strchr(__Pyx_MODULE_NAME, '.');
        if (package_sep != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PyExec */
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {
    return __Pyx_PyExec3(o, globals, NULL);
}
static PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {
    PyObject* result;
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyObject* s = 0;
    char *code = 0;
#endif
    if (!globals || globals == Py_None) {
        globals = __pyx_mstate_global->__pyx_d;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    else if (unlikely(!PyDict_Check(globals))) {
        __Pyx_TypeName globals_type_name =
            __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(globals));
        PyErr_Format(PyExc_TypeError,
                     "exec() arg 2 must be a dict, not " __Pyx_FMT_TYPENAME,
                     globals_type_name);
        __Pyx_DECREF_TypeName(globals_type_name);
        goto bad;
    }
#endif
    if (!locals || locals == Py_None) {
        locals = globals;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    if (__Pyx_PyDict_GetItemStr(globals, __pyx_mstate_global->__pyx_n_u_builtins) == NULL) {
        if (unlikely(PyDict_SetItem(globals, __pyx_mstate_global->__pyx_n_u_builtins, PyEval_GetBuiltins()) < 0))
            goto bad;
    }
    if (PyCode_Check(o)) {
        if (unlikely(__Pyx_PyCode_HasFreeVars((PyCodeObject *)o))) {
            PyErr_SetString(PyExc_TypeError,
                "code object passed to exec() may not contain free variables");
            goto bad;
        }
        #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030400
        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);
        #else
        result = PyEval_EvalCode(o, globals, locals);
        #endif
    } else {
        PyCompilerFlags cf;
        cf.cf_flags = 0;
#if PY_VERSION_HEX >= 0x030800A3
        cf.cf_feature_version = PY_MINOR_VERSION;
#endif
        if (PyUnicode_Check(o)) {
            cf.cf_flags = PyCF_SOURCE_IS_UTF8;
            s = PyUnicode_AsUTF8String(o);
            if (unlikely(!s)) goto bad;
            o = s;
        } else if (unlikely(!PyBytes_Check(o))) {
            __Pyx_TypeName o_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(o));
            PyErr_Format(PyExc_TypeError,
                "exec: arg 1 must be string, bytes or code object, got " __Pyx_FMT_TYPENAME,
                o_type_name);
            __Pyx_DECREF_TypeName(o_type_name);
            goto bad;
        }
        code = PyBytes_AS_STRING(o);
        if (PyEval_MergeCompilerFlags(&cf)) {
            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);
        } else {
            result = PyRun_String(code, Py_file_input, globals, locals);
        }
        Py_XDECREF(s);
    }
    return result;
bad:
    Py_XDECREF(s);
    return 0;
#else // CYTHON_COMPILING_IN_LIMITED_API
    {
        PyObject *builtins, *exec, *exec_str;
        builtins = PyEval_GetBuiltins();
        if (!builtins) return NULL;
        exec_str = PyUnicode_FromStringAndSize("exec", 4);
        if (!exec_str) return NULL;
        exec = PyObject_GetItem(builtins, exec_str);
        Py_DECREF(exec_str);
        if (!exec) return NULL;
        result = PyObject_CallFunctionObjArgs(exec, o, globals, locals, NULL);
        Py_DECREF(exec);
        return result;
    }
#endif
}

/* PyExecGlobals */
static PyObject* __Pyx_PyExecGlobals(PyObject* code) {
    return __Pyx_PyExec2(code, __pyx_mstate_global->__pyx_d);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        if (!PyErr_Occurred())
            PyErr_SetNone(PyExc_NameError);
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
    PyErr_Clear();
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
  #if PY_VERSION_HEX < 0x03090000
    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)
  #elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {
    PyTypeObject *tp = Py_TYPE(callable);
    #if defined(__Pyx_CyFunction_USED)
    if (__Pyx_CyFunction_CheckExact(callable)) {
        return __Pyx_CyFunction_func_vectorcall(callable);
    }
    #endif
    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {
        return NULL;
    }
    assert(PyCallable_Check(callable));
    Py_ssize_t offset = tp->tp_vectorcall_offset;
    assert(offset > 0);
    vectorcallfunc ptr;
    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));
    return ptr;
}
  #else
    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)
  #endif
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);
        if (f) {
            return f(func, args, _nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, _nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, _nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectFastCallMethod */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {
    PyObject *result;
    PyObject *attr = PyObject_GetAttr(args[0], name);
    if (unlikely(!attr))
        return NULL;
    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);
    Py_DECREF(attr);
    return result;
}
#endif

/* CLineInTraceback */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
        Py_XINCREF(use_cline);
        __Pyx_END_CRITICAL_SECTION();
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_INCREF(use_cline);
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    Py_XDECREF(use_cline);
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = code_cache->entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__find_code_object;
    return NULL; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just miss.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);
    if (old_count < 0) {
        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
        return NULL;
    }
#endif
    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
#endif
    return result;
#endif
}
static void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            code_cache->entries = entries;
            code_cache->max_count = 64;
            code_cache->count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_INCREF(code_object);
        Py_DECREF(tmp);
        return;
    }
    if (code_cache->count == code_cache->max_count) {
        int new_max = code_cache->max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        code_cache->entries = entries;
        code_cache->max_count = new_max;
    }
    for (i=code_cache->count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    code_cache->count++;
    Py_INCREF(code_object);
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__insert_code_object;
    return; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just fail.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type expected = 0;
    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {
        return;
    }
#endif
    __pyx__insert_code_object(code_cache, code_line, code_object);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);
#endif
#endif
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* MainFunction */
#ifdef __FreeBSD__
#include <floatingpoint.h>
#endif
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
int wmain(int argc, wchar_t **argv)
#else
static int __Pyx_main(int argc, wchar_t **argv)
#endif
{
    /* 754 requires that FP exceptions run in "no stop" mode by default,
     * and until C vendors implement C99's ways to control FP exceptions,
     * Python requires non-stop mode.  Alas, some platforms enable FP
     * exceptions by default.  Here we disable them.
     */
#ifdef __FreeBSD__
    fp_except_t m;
    m = fpgetmask();
    fpsetmask(m & ~FP_X_OFL);
#endif
#if PY_VERSION_HEX < 0x03080000
    if (argc && argv)
        Py_SetProgramName(argv[0]);
#endif
    if (PyImport_AppendInittab("Brother", PyInit_Brother) < 0) return 1;
#if PY_VERSION_HEX < 0x03080000
    Py_Initialize();
    if (argc && argv)
        PySys_SetArgv(argc, argv);
#else
    {
        PyStatus status;
        PyConfig config;
        PyConfig_InitPythonConfig(&config);
        config.parse_argv = 0;
        if (argc && argv) {
            status = PyConfig_SetString(&config, &config.program_name, argv[0]);
            if (PyStatus_Exception(status)) {
                PyConfig_Clear(&config);
                return 1;
            }
            status = PyConfig_SetArgv(&config, argc, argv);
            if (PyStatus_Exception(status)) {
                PyConfig_Clear(&config);
                return 1;
            }
        }
        status = Py_InitializeFromConfig(&config);
        if (PyStatus_Exception(status)) {
            PyConfig_Clear(&config);
            return 1;
        }
        PyConfig_Clear(&config);
    }
#endif
    {
      PyObject* m = NULL;
      __pyx_module_is_main_Brother = 1;
      m = PyImport_ImportModule("Brother");
      if (!m && PyErr_Occurred()) {
          PyErr_Print();
          return 1;
      }
      Py_XDECREF(m);
    }
    if (Py_FinalizeEx() < 0)
        return 2;
    return 0;
}
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
#include <locale.h>
int
main(int argc, char **argv)
{
    if (!argc) {
        return __Pyx_main(0, NULL);
    }
    else {
        int i, res;
        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);
        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);
        char *oldloc = strdup(setlocale(LC_ALL, NULL));
        if (!argv_copy || !argv_copy2 || !oldloc) {
            fprintf(stderr, "out of memory\\n");
            free(argv_copy);
            free(argv_copy2);
            free(oldloc);
            return 1;
        }
        res = 0;
        setlocale(LC_ALL, "");
        for (i = 0; i < argc; i++) {
            argv_copy2[i] = argv_copy[i] = Py_DecodeLocale(argv[i], NULL);
            if (!argv_copy[i]) res = 1;
        }
        setlocale(LC_ALL, oldloc);
        free(oldloc);
        if (res == 0)
            res = __Pyx_main(argc, argv_copy);
        for (i = 0; i < argc; i++) {
            PyMem_RawFree(argv_copy2[i]);
        }
        free(argv_copy);
        free(argv_copy2);
        return res;
    }
}
#endif

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
static __Pyx_TypeName
__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)
{
    PyObject *module = NULL, *name = NULL, *result = NULL;
    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_qualname);
    #else
    name = PyType_GetQualName(tp);
    #endif
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;
    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_module);
    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;
    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {
        result = name;
        name = NULL;
        goto done;
    }
    result = PyUnicode_FromFormat("%U.%U", module, name);
    if (unlikely(result == NULL)) goto bad;
  done:
    Py_XDECREF(name);
    Py_XDECREF(module);
    return result;
  bad:
    PyErr_Clear();
    if (name) {
        result = name;
        name = NULL;
    } else {
        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u_);
    }
    goto done;
}
#endif

/* PyObjectVectorCallKwBuilder */
#if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetRuntimeVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
    if (PyByteArray_Check(o)) {
#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
#else
        *length = PyByteArray_Size(o);
        if (*length == -1) return NULL;
        return PyByteArray_AsString(o);
#endif
    } else
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {
    CYTHON_UNUSED_VAR(b);
    return __Pyx_NewRef(Py_None);
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}


/* MultiPhaseInitModuleState */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1
#else
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0
#endif
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS
#error "Module state with PEP489 requires atomics. Currently that's one of\
 C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"
#endif
#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#define __Pyx_ModuleStateLookup_Lock()
#define __Pyx_ModuleStateLookup_Unlock()
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000
static PyMutex __Pyx_ModuleStateLookup_mutex = {0};
#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(__cplusplus) && __cplusplus >= 201103L
#include <mutex>
static std::mutex __Pyx_ModuleStateLookup_mutex;
#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()
#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()
#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)
#include <threads.h>
static mtx_t __Pyx_ModuleStateLookup_mutex;
static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;
static void __Pyx_ModuleStateLookup_initialize_mutex(void) {
    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);
}
#define __Pyx_ModuleStateLookup_Lock()\
  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\
  mtx_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(HAVE_PTHREAD_H)
#include <pthread.h>
static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;
#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(_WIN32)
#include <Windows.h>  // synchapi.h on its own doesn't work
static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;
#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#else
#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\
 Requires C standard >= C11, or C++ standard >= C++11,\
 or pthreads, or the Windows 32 API, or Python >= 3.13."
#endif
typedef struct {
    int64_t id;
    PyObject *module;
} __Pyx_InterpreterIdAndModule;
typedef struct {
    char interpreter_id_as_index;
    Py_ssize_t count;
    Py_ssize_t allocated;
    __Pyx_InterpreterIdAndModule table[1];
} __Pyx_ModuleStateLookupData;
#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;
#else
static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;
#endif
static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(
        __Pyx_InterpreterIdAndModule* table,
        Py_ssize_t count,
        int64_t interpreterId) {
    __Pyx_InterpreterIdAndModule* begin = table;
    __Pyx_InterpreterIdAndModule* end = begin + count;
    if (begin->id == interpreterId) {
        return begin;
    }
    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;
        if (halfway->id == interpreterId) {
            return halfway;
        }
        if (halfway->id < interpreterId) {
            begin = halfway;
        } else {
            end = halfway;
        }
    }
    for (; begin < end; ++begin) {
        if (begin->id >= interpreterId) return begin;
    }
    return begin;
}
static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return NULL;
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
    {
        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        if (likely(data)) {
            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);
            if (likely(data == new_data)) {
                goto read_finished;
            }
        }
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        __Pyx_ModuleStateLookup_Lock();
        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);
        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
        __Pyx_ModuleStateLookup_Unlock();
    }
  read_finished:;
#else
    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_InterpreterIdAndModule* found = NULL;
    if (unlikely(!data)) goto end;
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            found = data->table+interpreter_id;
        }
    } else {
        found = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
    }
  end:
    {
        PyObject *result=NULL;
        if (found && found->id == interpreter_id) {
            result = found->module;
        }
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
#endif
        return result;
    }
}
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {
    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);
}
#else
#define __Pyx_ModuleStateLookup_wait_until_no_readers()
#endif
static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {
    Py_ssize_t to_allocate = (*old_data)->allocated;
    while (to_allocate <= interpreter_id) {
        if (to_allocate == 0) to_allocate = 1;
        else to_allocate *= 2;
    }
    __Pyx_ModuleStateLookupData *new_data = *old_data;
    if (to_allocate != (*old_data)->allocated) {
         new_data = (__Pyx_ModuleStateLookupData *)realloc(
            *old_data,
            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
        if (!new_data) {
            PyErr_NoMemory();
            return -1;
        }
        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {
            new_data->table[i].id = i;
            new_data->table[i].module = NULL;
        }
        new_data->allocated = to_allocate;
    }
    new_data->table[interpreter_id].module = module;
    if (new_data->count < interpreter_id+1) {
        new_data->count = interpreter_id+1;
    }
    *old_data = new_data;
    return 0;
}
static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {
    __Pyx_InterpreterIdAndModule *read = data->table;
    __Pyx_InterpreterIdAndModule *write = data->table;
    __Pyx_InterpreterIdAndModule *end = read + data->count;
    for (; read<end; ++read) {
        if (read->module) {
            write->id = read->id;
            write->module = read->module;
            ++write;
        }
    }
    data->count = write - data->table;
    for (; write<end; ++write) {
        write->id = 0;
        write->module = NULL;
    }
    data->interpreter_id_as_index = 0;
}
static int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    int result = 0;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_ModuleStateLookupData *new_data = old_data;
    if (!new_data) {
        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));
        if (!new_data) {
            result = -1;
            PyErr_NoMemory();
            goto end;
        }
        new_data->allocated = 1;
        new_data->interpreter_id_as_index = 1;
    }
    __Pyx_ModuleStateLookup_wait_until_no_readers();
    if (new_data->interpreter_id_as_index) {
        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);
            goto end;
        }
        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);
    }
    {
        Py_ssize_t insert_at = 0;
        {
            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
                new_data->table, new_data->count, interpreter_id);
            assert(lower_bound);
            insert_at = lower_bound - new_data->table;
            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {
                lower_bound->module = module;
                goto end;  // already in table, nothing more to do
            }
        }
        if (new_data->count+1 >= new_data->allocated) {
            Py_ssize_t to_allocate = (new_data->count+1)*2;
            new_data =
                (__Pyx_ModuleStateLookupData*)realloc(
                    new_data,
                    sizeof(__Pyx_ModuleStateLookupData) +
                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
            if (!new_data) {
                result = -1;
                new_data = old_data;
                PyErr_NoMemory();
                goto end;
            }
            new_data->allocated = to_allocate;
        }
        ++new_data->count;
        int64_t last_id = interpreter_id;
        PyObject *last_module = module;
        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {
            int64_t current_id = new_data->table[i].id;
            new_data->table[i].id = last_id;
            last_id = current_id;
            PyObject *current_module = new_data->table[i].module;
            new_data->table[i].module = last_module;
            last_module = current_module;
        }
    }
  end:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);
#else
    __Pyx_ModuleStateLookup_data = new_data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return result;
}
static int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;
#endif
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            data->table[interpreter_id].module = NULL;
        }
        goto done;
    }
    {
        __Pyx_ModuleStateLookup_wait_until_no_readers();
        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
        if (!lower_bound) goto done;
        if (lower_bound->id != interpreter_id) goto done;
        __Pyx_InterpreterIdAndModule *end = data->table+data->count;
        for (;lower_bound<end-1; ++lower_bound) {
            lower_bound->id = (lower_bound+1)->id;
            lower_bound->module = (lower_bound+1)->module;
        }
    }
    --data->count;
    if (data->count == 0) {
        free(data);
        data = NULL;
    }
  done:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);
#else
    __Pyx_ModuleStateLookup_data = data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return 0;
}
#endif

/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
